#+TITLE: rfnash's Emacs configuration
#+OPTIONS: toc:4 h:4
* Configuration
** About this file
<<babel-init>>
TODO: write something about this file.
** package.el
old ELPA package config for historical interest
#+begin_src emacs-lisp :tangle no
  (require 'package)
  (add-to-list 'package-archives
            '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
            '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
            '("tromey" . "http://tromey.com/elpa/") t)
  (add-to-list 'package-archives
            '("gnu" . "http://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
            '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)

  (when (not package-archive-contents)
   (package-refresh-contents))

  (defvar my-packages '((cl-lib)
                     (bbdb
                      (progn
                        (setq bbdb-file "~/.emacs.d/bbdb")
                        (require 'bbdb)
                        (bbdb-initialize 'gnus 'message)
                        (bbdb-insinuate-message)
                        (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
                        (setq bbdb-send-mail-style 'gnus)
                        (setq bbdb-complete-name-full-completion t)
                        (setq bbdb-completion-type 'primary-or-name)
                        (setq bbdb-complete-name-allow-cycling t)
                        (setq bbdb-offer-save 1
                              bbdb-use-pop-up t
                              bbdb-electric-p t
                              bbdb-popup-target-lines  1)))
                     ;;(bbdb-vcard)
                     (emms)
                     (deft
                       (progn
                         ;; deft: homepage: http://jblevins.org/projects/deft/
                         ;; also http://www.emacswiki.org/emacs/DeftMode
                         (setq deft-extension "org")
                         (setq deft-text-mode 'org-mode)
                         (setq deft-directory "~/Dropbox/notes")
                         (global-set-key [f8] 'deft) ; (setq deft-use-filename-as-title t)
                         ))
                     (evil)
                     (linum-off
                      (require 'linum-off))          ; linum slows down org-mode
                     (quack)
                     (geiser)
                     (puppet-mode)
                     (bitlbee (require 'bitlbee))
                     (rainbow-delimiters (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
                     (powerline)
                     (htmlize)                       ; required by org-mode html export
                     (helm-ag)
                     (w3m)
                     (elixir-mode)
                     (flymake-easy)                  ; required by flymake-elixir
                     (flymake-elixir
                      (progn
                        (add-hook 'find-file-hook 'flymake-find-file-hook)
                        (require 'flymake-elixir)
                        (add-hook 'elixir-mode-hook 'flymake-elixir-load)))
                     (smart-tab                      ; indents or completes, inteligently
                      (progn
                        (require 'smart-tab)
                        (global-smart-tab-mode 1)
                        (define-key read-expression-map [(tab)] 'hippie-expand)))
                     (nrepl                          ;  see https://github.com/kingtim/nrepl.el
                      (progn
                        (add-hook 'nrepl-interaction-mode-hook 'nrepl-turn-on-eldoc-mode)
                        (setq nrepl-hide-special-buffers t)
                        (add-to-list 'same-window-buffer-names "*nrepl*")
                        (add-hook 'nrepl-mode-hook 'subword-mode)
                        (add-hook 'nrepl-mode-hook 'paredit-mode)
                        (add-hook 'nrepl-mode-hook 'rainbow-delimiters-mode)))
                     (auctex)
                     (auctex-latexmk)
                     (ioccur)                       ; not sure if i like better than helm-occur or not
                     (switch-window)
                     (goto-last-change)
                     (org-page))
  "A list of packages to ensure are installed at launch.")

  (dolist (p my-packages)
   (progn
     (when (not (package-installed-p (car p)))
       (package-install (car p)))
     (eval (cadr p))))

  (custom-set-faces
  '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
  '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))
#+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:21]
   :END:
** ido.el
   old ido config for historical reference
   #+begin_src emacs-lisp :tangle no
     use ido for minibuffer completion
     (require 'ido)
     (ido-mode t)
     (setq ido-save-directory-list-file "~/.emacs.d/.ido.last")
     (setq ido-enable-flex-matching t)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-show-dot-for-dired t)

     smex: a better (ido like) M-x
     (setq smex-save-file "~/.emacs.d/.smex-items")
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ; This is your old M-x.

     (require 'ido-ubiquitous)
     (ido-ubiquitous-mode 1)

     Fix ido-ubiquitous for newer packages
     (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
      `(eval-after-load ,package
         '(defadvice ,cmd (around ido-ubiquitous-new activate)
          (let ((ido-ubiquitous-enable-compatibility nil))
            ad-do-it))))

     (ido-ubiquitous-use-new-completing-read webjump 'webjump)
     (ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
     (ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)


     (defun recentf-ido-find-file ()
      "Find a recent file using ido."
      (interactive)
      (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
        (when file
          (find-file file))))
     (global-set-key (kbd "C-c f")  'recentf-ido-find-file)

     See the following
     org-refiling - http://kangtu.me/~kangtu/pavilion.html
     Targets include this file and any file contributing to the agenda - up to 9 levels deep
     See also http://doc.norang.ca/org-mode.html#RefileSetup
     Use IDO for both buffer and file completion and ido-everywhere to t
     (setq org-completion-use-ido nil)
     (setq ido-max-directory-size 100000)
     (ido-mode (quote both))

     (load-file "/usr/share/emacs/24.3/lisp/ido.el.gz")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:30]
   :END:
** [[http://www.emacswiki.org/emacs/download/org-occur-goto.el][org-occur-goto]]
   #+begin_src emacs-lisp
     ;;; org-occur-goto.el -- search open org buffers with an occur interface

     ;; This file is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation; either version 2, or (at your option)
     ;; any later version.

     ;; This file is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; You should have received a copy of the GNU General Public License
     ;; along with GNU Emacs; see the file COPYING.  If not, write to the
     ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     ;; Boston, MA 02110-1301, USA.

     ;;; Commentary:
     ;;;
     ;;;
     ;;; Usage: M-x oog, then start typing
     ;;;
     ;;; select from the occur matches with up/down/pgup/pgdown and press enter
     ;;; (you can navigate the history with M-p/M-n)
     ;;;
     ;;; the search string must be at least 3 characters long (by default)
     ;;;


     (require 'cl)

     (defvar oog-idle-delay 0.5)

     (defvar oog-minimum-input-length 3)


     (defvar oog-map
       (let ((map (copy-keymap minibuffer-local-map)))
         (define-key map (kbd "<down>") 'oog-next-line)
         (define-key map (kbd "<up>") 'oog-previous-line)
         (define-key map (kbd "<prior>") 'oog-previous-page)
         (define-key map (kbd "<next>") 'oog-next-page)
         map))



     (defvar oog-history-list nil)


     (defun oog-previous-line ()
       (interactive)
       (oog-move-selection 'forward-line -1))


     (defun oog-next-line ()
       (interactive)
       (oog-move-selection 'forward-line 1))


     (defun oog-previous-page ()
       (interactive)
       (oog-move-selection 'scroll-down nil))


     (defun oog-next-page ()
       (interactive)
       (oog-move-selection 'scroll-up nil))


     (defun oog-move-selection (movefunc movearg)
       (let ((win (get-buffer-window "*Occur*")))
         (if win
             (with-selected-window win
               (condition-case nil
                   (funcall movefunc movearg)
                 (beginning-of-buffer (goto-char (point-min)))
                 (end-of-buffer (goto-char (point-max))))))))


     (defun oog-check-input ()
       (when (sit-for oog-idle-delay)
         (unless (equal (minibuffer-contents) oog-current-input)
           (setq oog-current-input (minibuffer-contents))

           (if (< (length oog-current-input) oog-minimum-input-length)
               (let ((win (get-buffer-window "*Occur*")))
                 (if win
                     (with-selected-window win
                       (setq buffer-read-only nil)
                       (erase-buffer))))

             (save-excursion
               (flet ((message (&rest args) nil))  ;; suppress occur messages
                 (multi-occur
                  (remove nil (mapcar (lambda (buffer)
                                        (with-current-buffer buffer
                                          (if (eq major-mode 'org-mode)
                                              buffer)))
                                      (buffer-list)))
                  oog-current-input))
               (if (get-buffer "*Occur*")
                   ;; put cursor on first matching line for convenience
                   (let ((win (get-buffer-window "*Occur*")))
                     (if win
                         (with-selected-window win
                           (forward-line))))
                 (message "No matches.")))))))



     (defun oog ()
       (interactive)
       (let ((cursor-in-non-selected-windows 'box)
             marker)
         (save-window-excursion
           (add-hook 'post-command-hook 'oog-check-input)
           (setq oog-current-input nil)

           (unwind-protect
               (let ((minibuffer-local-map oog-map))
                 (read-string "string: " nil 'oog-history-list))

             (remove-hook 'post-command-hook 'oog-check-input))

           (let ((buf (get-buffer "*Occur*")))
             (if buf
                 (with-current-buffer buf
                   (unless (= (buffer-size) 0)
                     (setq marker (occur-mode-find-occurrence)))))))

         (switch-to-buffer (marker-buffer marker))
         (goto-char marker)
         (when (outline-invisible-p)
           (save-excursion
             (outline-previous-visible-heading 1)
             (org-show-subtree)))))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:27]
   :END:
** Quicklisp
   Added manually as per quicklisp instructed after running ~(ql:quickload "quicklisp-slime-helper")~ in sbcl
   #+begin_src emacs-lisp
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:35]
   :END:
** Personal.el
*** Load [[http://batsov.com/prelude/][Emacs Prelude]] modules
    #+begin_src emacs-lisp
      ;;; Uncomment the modules you'd like to use and restart Prelude afterwards
      (require 'prelude-erc)                  ; Emacs IRC client
      (require 'prelude-ido)                  ; Super charges Emacs completion for C-x C-f and more
      (require 'prelude-helm)                 ; Interface for narrowing and search
      (require 'prelude-company)
      (require 'prelude-key-chord)            ; Binds useful features to key combinations
      (require 'prelude-mediawiki)
      ;;(require 'prelude-evil)

      ;;; Programming languages support
      (require 'prelude-c)
      (require 'prelude-clojure)
      (require 'prelude-coffee)
      (require 'prelude-common-lisp)
      (require 'prelude-css)
      (require 'prelude-emacs-lisp)
      (require 'prelude-erlang)
      (require 'prelude-haskell)
      (require 'prelude-haskell)
      (require 'prelude-js)
      (require 'prelude-latex)
      (require 'prelude-lisp)
      (require 'prelude-org)                  ; Org-mode helps you keep TODO lists, notes and more
      (require 'prelude-perl)
      (require 'prelude-python)
      (require 'prelude-ruby)
      (require 'prelude-scala)
      (require 'prelude-scheme)
      (require 'prelude-shell)
      (require 'prelude-scss)
      (require 'prelude-web)                  ; Emacs mode for web templates
      (require 'prelude-xml)
    #+end_src
*** Set the default directory to HOME
    #+begin_src emacs-lisp
      (setq default-directory "~")
    #+end_src
*** smart-tab and hippie-expand
    #+begin_src emacs-lisp
      (prelude-require-package 'smart-tab)
      (require 'smart-tab)
      (global-smart-tab-mode 1)
      (define-key read-expression-map [(tab)] 'hippie-expand)
    #+end_src
*** elscreen (no longer used)
    #+begin_src emacs-lisp
      (prelude-require-package 'elscreen)
    #+end_src
*** switch-window
    #+begin_src emacs-lisp
      (prelude-require-package 'switch-window)
      (global-set-key (kbd "C-x o") 'switch-window)
    #+end_src
*** emagician-fix-spell-memory
    #+begin_src emacs-lisp
    (prelude-require-package 'emagician-fix-spell-memory)
    (require 'emagician-fix-spell-memory)
    #+end_src
*** elip
    #+begin_src emacs-lisp :tangle no
      (add-to-list 'load-path "~/.local/share/emacs/site-lisp")
      (add-to-list 'load-path "~/.local/share/emacs/site-lisp/edb")
      (require 'elip)
    #+end_src
*** paredit-mode
    #+begin_src emacs-lisp
      (prelude-require-package 'paredit)
      (add-hook 'lisp-interaction-mode-hook 'paredit-mode)
      (add-hook 'clojure-mode-hook 'paredit-mode)
      (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    #+end_src
*** Require various packages
    #+begin_src emacs-lisp
      (prelude-require-packages '(helm-orgcard helm-descbinds helm-backup helm-helm-commands))
      (prelude-require-packages '(ag helm-ag helm-ag-r))
    #+end_src
*** BBDB
    #+begin_src emacs-lisp
      (prelude-require-package 'bbdb)
      (setq bbdb-file "~/.emacs.d/bbdb")
      (require 'bbdb)
      (bbdb-initialize 'gnus 'message)
      (bbdb-insinuate-message)
      (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
      (add-hook 'kill-emacs-hook 'bbdb-save)
      ;;(prelude-require-package 'bbdb-vcard)
    #+end_src
*** helm-mu
    #+begin_src emacs-lisp
      (add-to-list 'load-path (expand-file-name "helm-mu" prelude-vendor-dir))
      ;;(require 'helm-mu)
    #+end_src
*** eclectic pair mode
    #+begin_src emacs-lisp
      (electric-pair-mode +1)
      (electric-indent-mode +1)
    #+end_src
*** [[https://github.com/swannodette/ob-sml][ob-sml]]
    #+begin_src emacs-lisp
      (prelude-require-package 'ob-sml)
    #+end_src
*** paradox
    #+begin_src emacs-lisp
      (prelude-require-package 'paradox)
    #+end_src
*** Default browser
    Set the default browser to vimb.
    #+begin_src emacs-lisp
      (setq browse-url-browser-function
            'browse-url-generic browse-url-generic-program "vimb")
    #+end_src
*** TODO set-browser
    A function to easily interactively change the default browser.
    TODO: include a list of browsers to choose from.
    #+begin_src emacs-lisp
      (defun set-browser (browser)
        "Prompt for BROWSER to set as default."
        (interactive "sBrowser: ")
        (setq browse-url-browser-function
              'browse-url-generic browse-url-generic-program browser))
    #+end_src
*** Old init.el
    For historical reference
    #+begin_src emacs-lisp :tangle no
      (mapc 'load (directory-files "~/.emacs.d/conf.d/" t "^[^#!].*\.el$"))
      (server-start)
      (custom-set-variables
      custom-set-variables was added by Custom.
      If you edit it by hand, you could mess it up, so be careful.
      Your init file should contain only one such instance.
      If there is more than one, they won't work right.
      '(helm-adaptative-mode t nil (helm-adaptative))
      '(helm-adaptive-history-length 1000)
      '(helm-ff-file-name-history-use-recentf t)
      (custom-set-faces
      custom-set-faces was added by Custom.
      If you edit it by hand, you could mess it up, so be careful.
      Your init file should contain only one such instance.
      If there is more than one, they won't work right.
      '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
      '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

      ;; Various settings from emacs kicker
      ;; (https://github.com/dimitri/emacs-kicker)

      ;; on to the visual settings


      (setq inhibit-splash-screen t)               ; no splash screen, thanks
      (line-number-mode t)                 ; have line numbers and
      (column-number-mode t)                       ; column numbers in the mode line

      (tool-bar-mode -1)                           ; no tool bar with icons
      (scroll-bar-mode -1)                 ; no scroll bars
      (menu-bar-mode -1)                      ; no menu bar

      (global-hl-line-mode)                        ; highlight current line
      (global-linum-mode 1)                        ; add line numbers on the left

      ;; full screen
      (defun fullscreen ()
        (interactive)
        (set-frame-parameter nil 'fullscreen
                          (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
      (global-set-key [f11] 'fullscreen)

      ;; Use the clipboard, pretty please, so that copy/paste "works"
      (setq x-select-enable-clipboard t)

      ;; Navigate currently visible windows with M-<arrows>
      (windmove-default-keybindings 'meta)
      (setq windmove-wrap-around t)

      ;; winner-mode provides C-<left> to get back to previous window layout
      (winner-mode 1)

      ;; whenever an external process changes a file underneath emacs, and there
      ;; was no unsaved changes in the corresponding buffer, just revert its
      ;; content to reflect what's on-disk.
      (global-auto-revert-mode 1)

      ;; C-x C-j opens dired with the cursor right on the file you're editing
      (require 'dired-x)

      (set-face-attribute 'default nil :family "Liberation Mono for Powerline" :height 120)


      ;; From emacsredux
      (defun eval-and-replace ()
        "Replace the preceding sexp with its value."
        (interactive)
        (backward-kill-sexp)
        (condition-case nil
            (prin1 (eval (read (current-kill 0)))
                (current-buffer))
          (error (message "Invalid expression")
              (insert (current-kill 0)))))
      (global-set-key (kbd "C-c e") 'eval-end-replace)

      ;; from whattheemacsd.com

      ;; Write backup files to own directory
      (setq backup-directory-alist
            `(("." . ,(expand-file-name
                    (concat user-emacs-directory "backups")))))

      ;; Make backups of files, even when they're in version control
      (setq vc-make-backup-files t)

      ;; Save point position between sessions
      (require 'saveplace)
      (setq-default save-place t)
      (setq save-place-file (expand-file-name ".places" user-emacs-directory))

      (defun cleanup-buffer-safe ()
        "Perform a bunch of safe operations on the whitespace content of a buffer.
      Does not indent buffer, because it is used for a before-save-hook, and that
      might be bad.
      TODO: Will screw up makefiles by changing tabs to whitespace."
        (interactive)
        ;; (untabify (point-min) (point-max))
        (delete-trailing-whitespace)
        (set-buffer-file-coding-system 'utf-8))

      ;; Various superfluous white-space. Just say no.
      (add-hook 'before-save-hook 'cleanup-buffer-safe)

      (defun cleanup-buffer ()
        "Perform a bunch of operations on the whitespace content of a buffer.
      Including indent-buffer, which should not be called automatically on save."
        (interactive)
        (cleanup-buffer-safe)
        (indent-region (point-min) (point-max)))

      (global-set-key (kbd "C-c n") 'cleanup-buffer)

      (global-set-key (kbd "M-j")
                   (lambda ()
                     (interactive)
                     (join-line -1)))

      (require 'recentf)
      (setq recentf-save-file "~/.emacs.d/.recentf"
            recentf-max-saved-items 200)
      (recentf-mode +1)

      ;; Enables paredit in the minibuffer when it is used to eval a lisp
      ;; expression with M-:
      (defun conditionally-enable-paredit-mode ()
        "Enable `paredit-mode' in the minibuffer, during `eval-expression'."
        (if (eq this-command 'eval-expression)
            (paredit-mode 1)))

      (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)

      ;; treat CamelCase words as seperate words for eg. deletion
      (add-hook 'prog-mode-hook 'subword-mode)

      (setq whitespace-global-modes '(not org-mode))
      ;;(global-whitespace-mode)
      (setq show-trailing-whitespace t)

      (defun htop ()
        "Start htop in its own buffer."
        (interactive)
        (ansi-term "htop" "htop"))

      (defun mixer ()
        "Start alsamixer in its own buffer"
        (interactive)
        (ansi-term "alsamixer" "mixer"))
    #+end_src
*** org-page (no longer used)
    #+begin_src emacs-lisp :tangle no
      (require 'org-page)
    #+end_src
*** babel
    #+begin_src emacs-lisp
      (prelude-require-package 'babel)
    #+end_src
    :PROPERTIES:
    :CREATED:  [2014-07-24 Thu 10:09]
    :END:
*** ledger-mode
    #+begin_src emacs-lisp
      (prelude-require-package 'ledger-mode)
    #+end_src
    :PROPERTIES:
    :CREATED:  [2014-07-24 Thu 10:09]
    :END:
*** nix-mode
    #+begin_src emacs-lisp
      (prelude-require-package 'nix-mode)
      (require 'nix-mode)
    #+end_src
*** Require my modules
    #+begin_src emacs-lisp
      (add-to-list 'load-path (expand-file-name "rfnash" prelude-personal-dir))
      (require 'rfnash-color-theme)
      (require 'rfnash-el-get)
      (require 'rfnash-erc)
      (require 'rfnash-gnus)
      (require 'rfnash-helm)
      (require 'rfnash-mu4e)
      (require 'rfnash-newsticker)
      (require 'rfnash-org-mode)
      (require 'rfnash-org-modules)
      (require 'rfnash-prelude-mode)
      (require 'rfnash-remem)
    #+end_src
*** Setup the gnus init file
    #+begin_src emacs-lisp
      (setq gnus-init-file (expand-file-name "rfnash-gnus.el" prelude-personal-dir))
    #+end_src

*** Debug on error
    #+begin_src emacs-lisp
      (setq debug-on-error t)
    #+end_src

*** Emacs Server
    Start the Emacs server if it isn't already running
    #+begin_src emacs-lisp
      (require 'server)
      (if (not (server-running-p server-name)) (server-start))
    #+end_src

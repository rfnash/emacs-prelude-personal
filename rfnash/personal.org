#+TITLE: rfnash's Emacs configuration
#+OPTIONS: toc:4 h:4
* About this file
<<babel-init>>
#+begin_src emacs-lisp
  (prelude-require-packages '(use-package diminish))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                     ; if you use :diminish
  (require 'bind-key)                     ; if you use any :bind variant
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+end_src
TODO: write something about this file.
* Historical
  :PROPERTIES:
  :CREATED:  [2014-10-07 Tue 13:22]
  :END:
** init.el
   For historical reference
   #+begin_src emacs-lisp :tangle no
     (mapc 'load (directory-files "~/.emacs.d/conf.d/" t "^[^#!].*\.el$"))
     (server-start)
     (custom-set-variables
     custom-set-variables was added by Custom.
     If you edit it by hand, you could mess it up, so be careful.
     Your init file should contain only one such instance.
     If there is more than one, they won't work right.
     '(helm-adaptative-mode t nil (helm-adaptative))
     '(helm-adaptive-history-length 1000)
     '(helm-ff-file-name-history-use-recentf t)
     (custom-set-faces
     custom-set-faces was added by Custom.
     If you edit it by hand, you could mess it up, so be careful.
     Your init file should contain only one such instance.
     If there is more than one, they won't work right.
     '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
     '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))

     ;; Various settings from emacs kicker
     ;; (https://github.com/dimitri/emacs-kicker)

     ;; on to the visual settings


     (setq inhibit-splash-screen t)               ; no splash screen, thanks
     (line-number-mode t)                 ; have line numbers and
     (column-number-mode t)                       ; column numbers in the mode line

     (tool-bar-mode -1)                           ; no tool bar with icons
     (scroll-bar-mode -1)                 ; no scroll bars
     (menu-bar-mode -1)                      ; no menu bar

     (global-hl-line-mode)                        ; highlight current line
     (global-linum-mode 1)                        ; add line numbers on the left

     ;; full screen
     (defun fullscreen ()
       (interactive)
       (set-frame-parameter nil 'fullscreen
                         (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
     (global-set-key [f11] 'fullscreen)

     ;; Use the clipboard, pretty please, so that copy/paste "works"
     (setq x-select-enable-clipboard t)

     ;; Navigate currently visible windows with M-<arrows>
     (windmove-default-keybindings 'meta)
     (setq windmove-wrap-around t)

     ;; winner-mode provides C-<left> to get back to previous window layout
     (winner-mode 1)

     ;; whenever an external process changes a file underneath emacs, and there
     ;; was no unsaved changes in the corresponding buffer, just revert its
     ;; content to reflect what's on-disk.
     (global-auto-revert-mode 1)

     ;; C-x C-j opens dired with the cursor right on the file you're editing
     (require 'dired-x)

     (set-face-attribute 'default nil :family "Liberation Mono for Powerline" :height 120)


     ;; From emacsredux
     (defun eval-and-replace ()
       "Replace the preceding sexp with its value."
       (interactive)
       (backward-kill-sexp)
       (condition-case nil
           (prin1 (eval (read (current-kill 0)))
               (current-buffer))
         (error (message "Invalid expression")
             (insert (current-kill 0)))))
     (global-set-key (kbd "C-c e") 'eval-end-replace)

     ;; from whattheemacsd.com

     ;; Write backup files to own directory
     (setq backup-directory-alist
           `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))

     ;; Make backups of files, even when they're in version control
     (setq vc-make-backup-files t)

     ;; Save point position between sessions
     (require 'saveplace)
     (setq-default save-place t)
     (setq save-place-file (expand-file-name ".places" user-emacs-directory))

     (defun cleanup-buffer-safe ()
       "Perform a bunch of safe operations on the whitespace content of a buffer.
     Does not indent buffer, because it is used for a before-save-hook, and that
     might be bad.
     TODO: Will screw up makefiles by changing tabs to whitespace."
       (interactive)
       ;; (untabify (point-min) (point-max))
       (delete-trailing-whitespace)
       (set-buffer-file-coding-system 'utf-8))

     ;; Various superfluous white-space. Just say no.
     (add-hook 'before-save-hook 'cleanup-buffer-safe)

     (defun cleanup-buffer ()
       "Perform a bunch of operations on the whitespace content of a buffer.
     Including indent-buffer, which should not be called automatically on save."
       (interactive)
       (cleanup-buffer-safe)
       (indent-region (point-min) (point-max)))

     (global-set-key (kbd "C-c n") 'cleanup-buffer)

     (global-set-key (kbd "M-j")
                  (lambda ()
                    (interactive)
                    (join-line -1)))

     (require 'recentf)
     (setq recentf-save-file "~/.emacs.d/.recentf"
           recentf-max-saved-items 200)
     (recentf-mode +1)

     ;; Enables paredit in the minibuffer when it is used to eval a lisp
     ;; expression with M-:
     (defun conditionally-enable-paredit-mode ()
       "Enable `paredit-mode' in the minibuffer, during `eval-expression'."
       (if (eq this-command 'eval-expression)
           (paredit-mode 1)))

     (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)

     ;; treat CamelCase words as seperate words for eg. deletion
     (add-hook 'prog-mode-hook 'subword-mode)

     (setq whitespace-global-modes '(not org-mode))
     ;;(global-whitespace-mode)
     (setq show-trailing-whitespace t)

     (defun htop ()
       "Start htop in its own buffer."
       (interactive)
       (ansi-term "htop" "htop"))

     (defun mixer ()
       "Start alsamixer in its own buffer"
       (interactive)
       (ansi-term "alsamixer" "mixer"))
   #+end_src
** package.el
old ELPA package config for historical interest
#+begin_src emacs-lisp :tangle no
  (require 'package)
  (add-to-list 'package-archives
            '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (add-to-list 'package-archives
            '("org" . "http://orgmode.org/elpa/") t)
  (add-to-list 'package-archives
            '("tromey" . "http://tromey.com/elpa/") t)
  (add-to-list 'package-archives
            '("gnu" . "http://elpa.gnu.org/packages/") t)
  (add-to-list 'package-archives
            '("marmalade" . "http://marmalade-repo.org/packages/") t)
  (package-initialize)

  (when (not package-archive-contents)
   (package-refresh-contents))

  (defvar my-packages '((cl-lib)
                     (bbdb
                      (progn
                        (setq bbdb-file "~/.emacs.d/bbdb")
                        (require 'bbdb)
                        (bbdb-initialize 'gnus 'message)
                        (bbdb-insinuate-message)
                        (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
                        (setq bbdb-send-mail-style 'gnus)
                        (setq bbdb-complete-name-full-completion t)
                        (setq bbdb-completion-type 'primary-or-name)
                        (setq bbdb-complete-name-allow-cycling t)
                        (setq bbdb-offer-save 1
                              bbdb-use-pop-up t
                              bbdb-electric-p t
                              bbdb-popup-target-lines  1)))
                     ;;(bbdb-vcard)
                     (emms)
                     (deft
                       (progn
                         ;; deft: homepage: http://jblevins.org/projects/deft/
                         ;; also http://www.emacswiki.org/emacs/DeftMode
                         (setq deft-extension "org")
                         (setq deft-text-mode 'org-mode)
                         (setq deft-directory "~/Dropbox/notes")
                         (global-set-key [f8] 'deft) ; (setq deft-use-filename-as-title t)
                         ))
                     (evil)
                     (linum-off
                      (require 'linum-off))          ; linum slows down org-mode
                     (quack)
                     (geiser)
                     (puppet-mode)
                     (bitlbee (require 'bitlbee))
                     (rainbow-delimiters (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
                     (powerline)
                     (htmlize)                       ; required by org-mode html export
                     (helm-ag)
                     (w3m)
                     (elixir-mode)
                     (flymake-easy)                  ; required by flymake-elixir
                     (flymake-elixir
                      (progn
                        (add-hook 'find-file-hook 'flymake-find-file-hook)
                        (require 'flymake-elixir)
                        (add-hook 'elixir-mode-hook 'flymake-elixir-load)))
                     (smart-tab                      ; indents or completes, inteligently
                      (progn
                        (require 'smart-tab)
                        (global-smart-tab-mode 1)
                        (define-key read-expression-map [(tab)] 'hippie-expand)))
                     (nrepl                          ;  see https://github.com/kingtim/nrepl.el
                      (progn
                        (add-hook 'nrepl-interaction-mode-hook 'nrepl-turn-on-eldoc-mode)
                        (setq nrepl-hide-special-buffers t)
                        (add-to-list 'same-window-buffer-names "*nrepl*")
                        (add-hook 'nrepl-mode-hook 'subword-mode)
                        (add-hook 'nrepl-mode-hook 'paredit-mode)
                        (add-hook 'nrepl-mode-hook 'rainbow-delimiters-mode)))
                     (auctex)
                     (auctex-latexmk)
                     (ioccur)                       ; not sure if i like better than helm-occur or not
                     (switch-window)
                     (goto-last-change)
                     (org-page))
  "A list of packages to ensure are installed at launch.")

  (dolist (p my-packages)
   (progn
     (when (not (package-installed-p (car p)))
       (package-install (car p)))
     (eval (cadr p))))

  (custom-set-faces
  '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
  '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))
#+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:21]
   :END:
** ido.el
   old ido config for historical reference
   #+begin_src emacs-lisp :tangle no
     use ido for minibuffer completion
     (require 'ido)
     (ido-mode t)
     (setq ido-save-directory-list-file "~/.emacs.d/.ido.last")
     (setq ido-enable-flex-matching t)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-show-dot-for-dired t)

     smex: a better (ido like) M-x
     (setq smex-save-file "~/.emacs.d/.smex-items")
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ; This is your old M-x.

     (require 'ido-ubiquitous)
     (ido-ubiquitous-mode 1)

     Fix ido-ubiquitous for newer packages
     (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
      `(eval-after-load ,package
         '(defadvice ,cmd (around ido-ubiquitous-new activate)
          (let ((ido-ubiquitous-enable-compatibility nil))
            ad-do-it))))

     (ido-ubiquitous-use-new-completing-read webjump 'webjump)
     (ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
     (ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)


     (defun recentf-ido-find-file ()
      "Find a recent file using ido."
      (interactive)
      (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
        (when file
          (find-file file))))
     (global-set-key (kbd "C-c f")  'recentf-ido-find-file)

     See the following
     org-refiling - http://kangtu.me/~kangtu/pavilion.html
     Targets include this file and any file contributing to the agenda - up to 9 levels deep
     See also http://doc.norang.ca/org-mode.html#RefileSetup
     Use IDO for both buffer and file completion and ido-everywhere to t
     (setq org-completion-use-ido nil)
     (setq ido-max-directory-size 100000)
     (ido-mode (quote both))

     (load-file "/usr/share/emacs/24.3/lisp/ido.el.gz")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:30]
   :END:
* Programming
  :PROPERTIES:
  :CREATED:  [2014-10-07 Tue 13:24]
  :END:
** Quicklisp
   Added manually as per quicklisp instructed after running ~(ql:quickload "quicklisp-slime-helper")~ in sbcl
   #+begin_src emacs-lisp
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     (setq inferior-lisp-program "sbcl")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:35]
   :END:
** paxedit-mode
   #+begin_src emacs-lisp
     ;;; Won't install from package.el, cloned git repo instead
     (use-package paredit
       :ensure t
       :diminish paredit-mode)
     (use-package paxedit
       :commands paxedit-mode
       :diminish paxedit-mode
       :load-path "~/.emacs.d/paxedit"
       :init
       (add-hook 'emacs-lisp-mode-hook 'paxedit-mode)
       (add-hook 'clojure-mode-hook 'paxedit-mode)
       (add-hook 'lisp-interaction-mode-hook 'paxedit-mode)
       (add-hook 'paxedit-mode-hook 'paredit-mode)
       :config
       (define-key paxedit-mode-map (kbd "M-<right>") 'paxedit-transpose-forward)
       (define-key paxedit-mode-map (kbd "M-<left>") 'paxedit-transpose-backward)
       (define-key paxedit-mode-map (kbd "M-<up>") 'paxedit-backward-up)
       (define-key paxedit-mode-map (kbd "M-<down>") 'paxedit-backward-end)
       (define-key paxedit-mode-map (kbd "M-b") 'paxedit-previous-symbol)
       (define-key paxedit-mode-map (kbd "M-f") 'paxedit-next-symbol)
       (define-key paxedit-mode-map (kbd "C-%") 'paxedit-copy)
       (define-key paxedit-mode-map (kbd "C-&") 'paxedit-kill)
       (define-key paxedit-mode-map (kbd "C-*") 'paxedit-delete)
       (define-key paxedit-mode-map (kbd "C-^") 'paxedit-sexp-raise)
       (define-key paxedit-mode-map (kbd "M-u") 'paxedit-symbol-change-case)
       (define-key paxedit-mode-map (kbd "C-@") 'paxedit-symbol-copy)
       (define-key paxedit-mode-map (kbd "C-#") 'paxedit-symbol-kill)
       )
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-01-23 Fri 14:55]
   :END:
** [[https://github.com/Bruce-Connor/speed-of-thought-lisp][speed-of-thought-lisp]]
   #+begin_src emacs-lisp
     (prelude-require-package 'sotlisp)
     (require 'sotlisp)
     (speed-of-thought-mode)
     (eval-after-load "abbrev" '(diminish 'abbrev-mode))
     (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-03-05 Thu 16:06]
   :END:
** K / Kona
   #+begin_src emacs-lisp
     (use-package k-mode
       :load-path "~/.local/opt/kona/src")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-08-18 Mon 14:05]
   :END:
** Rust
   #+begin_src emacs-lisp
    (prelude-require-packages '(rust-mode flycheck-rust))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-09 Thu 23:42]
   :END:
** Picolisp
   #+begin_src emacs-lisp
     (use-package picolisp
       :load-path "~/.local/opt/picolisp/lib/el"
       :init (setq picolisp-program-name "~/.local/opt/picolisp/pil +")
       :mode ("\\.l$" . picolisp-mode)
       :commands picolisp-mode
       :config
       (add-hook 'picolisp-mode-hook
                 (lambda ()
                   (paredit-mode +1) ;; Loads paredit mode automatically
                   (tsm-mode) ;; Enables TSM
                   (define-key picolisp-mode-map (kbd "RET") 'newline-and-indent)
                   (define-key picolisp-mode-map (kbd "C-h") 'paredit-backward-delete)))
       )
     (use-package inferior-picolisp
       :load-path "~/.local/opt/picolisp/lib/el"
       :init (setq picolisp-program-name "~/.local/opt/picolisp/pil +")
       :commands run-picolisp
       )
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-28 Tue 17:16]
   :END:
** lfe
#+begin_src emacs-lisp
  (prelude-require-package 'lfe-mode)
#+end_src
  :PROPERTIES:
  :CREATED:  [2014-11-21 Fri 17:28]
  :END:

** Yasnippet
   #+begin_src emacs-lisp
     (prelude-require-packages '(yasnippet helm-c-yasnippet))
     (yas-global-mode 1)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-11-12 Wed 19:35]
   :END:
** SmartParens
   #+begin_src emacs-lisp
     (prelude-require-package 'smartparens)
     (smartparens-global-mode 1)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-12-04 Thu 18:36]
   :END:
** Electric Indent Mode
   #+begin_src emacs-lisp
     (electric-indent-mode +1)
   #+end_src
** EDBI
   #+begin_src emacs-lisp
     (prelude-require-packages '(edbi edbi-sqlite))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-20 Mon 23:33]
   :END:
** Debug on error
   #+begin_src emacs-lisp
     (setq debug-on-error t)
   #+end_src
** [[https://github.com/swannodette/ob-sml][ob-sml]]
   #+begin_src emacs-lisp
     (prelude-require-package 'ob-sml)
   #+end_src
** [[https://github.com/ikirill/hl-indent][hl-indent]]
   #+begin_src emacs-lisp
     (prelude-require-package 'hl-indent)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-12-29 Mon 19:02]
   :END:
** Agda
   #+begin_src emacs-lisp
     (load-file (let ((coding-system-for-read 'utf-8))
                  (shell-command-to-string "agda-mode locate")))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-12-04 Thu 17:49]
   :END:
** Geiser
   #+begin_src emacs-lisp
     (prelude-require-package 'geiser)
     (require 'geiser)
     (setq geiser-racket-binary "/usr/local/racket/bin/racket")
     (setq geiser-racket-gracket-binary "/usr/local/racket/bin/gracket-text")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-13 Fri 23:48]
   :END:
** Haskell
#+begin_src emacs-lisp :tangle no

  (use-package shm
    :ensure t
    :commands structured-haskell-mode
    :init
    (defun turn-on-structured-haskell-mode ()
      (require 'haskell-indent)
      (turn-off-haskell-indent)
      (structured-haskell-mode t))
    (add-hook 'haskell-mode-hook #'turn-on-structured-haskell-mode))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-10 Fri 19:49]
:END:
* Org Mode
  My personal org-mode config.
  TODO: was naively copied into my prelude config, check for redundancy
  :PROPERTIES:
  :CREATED:  [2014-10-07 Tue 13:37]
  :END:
** Load org-mode
   Loads my locally installed org-mode
   #+begin_src emacs-lisp
     ;; TODO: org-mobile-sync requires unavailable package emacs 24.3.50
     (prelude-require-packages '(org-pomodoro org-trello org-plus-contrib))
     (require 'org)
   #+end_src
** org-toodledo
   #+begin_src emacs-lisp
     ;; org-toodledo is installed via git
     (add-to-list 'load-path (expand-file-name "org-toodledo" prelude-vendor-dir))
     (prelude-require-package 'http-post-simple)
     (require 'org-toodledo)
     (setq org-toodledo-preserve-drawers t)
     (setq org-toodledo-sync-new-completed-tasks nil)
     (setq org-toodledo-userid "td52fa891b12039")
     (setq org-toodledo-sync-on-save "ask")
     (setq org-toodledo-archive-completed-tasks t)
     (setq org-toodledo-archive-deleted-tasks t)
     (setq org-toodledo-status-to-org-map
           '(("Active" . "TODO")
             ("None" . "TODO")
             ("Next Action" . "NEXT")
             ("Planning" . "TODO")
             ("Delegated" . "DELEGATED")
             ("Waiting" . "WAITING")
             ("Someday" . "SOMEDAY")
             ("Hold" . "SOMEDAY")
             ("Postponed" . "SOMEDAY")
             ("Canceled" . "CANCELED")
             ("Reference" . "REFERENCE")))
   #+end_src
** org-page
   #+begin_src emacs-lisp
     (setq
      op/personal-disqus-shortname "rfnash"
      op/personal-github-link "https://github.com/rfnash"
      op/repository-directory "~/git/blog.git/"
      op/repository-html-branch "gh-pages"
      op/repository-org-branch "source"
      op/site-domain "http://robertnash.net/"
      op/site-main-title "Robert Nash's Blog"
      op/site-sub-title "A sedomly updated blog")
   #+end_src
** Various org settings
   #+begin_src emacs-lisp
     (setq
      org-todo-keywords '((sequence
                           "NEXT(n)"
                           "TODO(t)"
                           "DELEGATED(g@)"
                           "SOMEDAY(s)"
                           "WAITING(w@)"
                           "|"
                           "DONE(d!)"
                           "CANCELLED(C@)"
                           "REFERENCE(r)")
                          (sequence "SCHED(c)" "|" "DONE(d!)")
                          (sequence "HABIT(h)" "|" "DONE(d!)")
                          (sequence "FILE(f)" "|")
                          (sequence "IDEA(i)" "|"))
      org-tag-alist '(("@work" . ?w) ("@home" . ?h) ("@phone" . ?p) ("@computer" . ?c) ("@tofile" . ?t)
                      ("READING" . ?r) ("GoodDesign" . ?d) ("7plus" . ?s) ("SCRATCH" . ?e) ("NEXT" . ?n) ("anki" . ?a))
      org-startup-folded t
      org-startup-indented t
      ;; org-hide-leading-stars t
      ;; org-hide-leading-stars nil
      org-log-into-drawer t
      org-refile-use-cache t
      org-return-follows-link t
      org-journal-dir "~/Documents/OrgMode/journal/"
      org-directory "~/Documents/OrgMode"
      org-default-notes-file (concat org-directory "/notes.org")
      ;; org-mobile-use-encryption t
      org-mobile-directory "~/Dropbox/MobileOrg"
      org-mobile-inbox-for-pull (concat org-directory "from-mobile.org")
      org-refile-use-cache t
      org-return-follows-link t
      org-enforce-todo-dependencies t
      org-blank-before-new-entry '((heading) (plain-list-item))
      org-contacts-birthday-format "Birthday: %h (%Y)"
      ;; org-drill-optimal-factor-matrix nil
      org-expiry-inactive-timestamps t
      ;; I had this set at 5, but setting Emac's timezone off by a few hours works better in practice,
      ;; because using this method, the completion day of habits is still recorded as when I actually did them,
      ;; not yesterday at 23:59
      org-extend-today-until 0
      org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id
      org-velocity-bucket "~/Documents/OrgMode/reference.org"
      )
   #+end_src
** Org Agenda Settings
   :PROPERTIES:
   :CREATED:  [2015-02-17 Tue 16:03]
   :END:
*** Misc
    #+begin_src emacs-lisp
      (setq
       org-agenda-sticky t
       org-agenda-window-setup 'current-window
       org-agenda-skip-deadline-if-done t
       org-agenda-skip-scheduled-if-deadline-is-shown nil
       org-agenda-sorting-strategy (quote ((agenda time-up habit-down priority-down) (todo priority-down category-keep) (tags priority-down category-keep) (search category-keep)))
       org-agenda-dim-blocked-tasks 'invisible
       org-agenda-skip-scheduled-if-deadline-is-shown t
       org-agenda-skip-scheduled-if-done t
       org-agenda-span 'day
       org-sort-agenda-notime-is-late nil
       org-agenda-columns-add-appointments-to-effort-sum t
       org-columns-default-format "%40ITEM(Task) %TODO %3PRIORITY %TAGS %17Effort(Estimated Effort){:} %5CLOCKSUM"
       org-global-properties '(("Effort_ALL" . "0 0:02 0:05 0:10 0:15 0:20 0:30 0:45 1:00 2:00"))
       )
    #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-17 Tue 16:06]
   :END:
*** org-agenda-files
    #+begin_src emacs-lisp
     (setq
      org-agenda-files (list     ; Can be set using C-c [ and C-c ] in org-mode
                        (concat org-directory "/notes.org")
                        (concat org-directory "/busybox.org")
                        (concat org-directory "/plover.org")
                        (concat org-directory "/Toodledo.org")
                        (concat org-directory "/reference.org")
                        (concat org-directory "/entertainment.org")
                        (concat org-directory "/filing.org")
                        (concat org-directory "/agenda.org")
                        (concat org-directory "/computers.org")
                        (concat org-directory "/bookmarks.org")
                        (concat org-directory "/vimb.org")
                        "~/Dropbox/Projects/learning.org"
                        (concat prelude-personal-dir "/rfnash/personal.org"))
     )
    #+end_src
    :PROPERTIES:
    :CREATED:  [2015-02-17 Tue 16:08]
    :END:
*** org-agenda-sorting-strategy
    #+begin_src emacs-lisp
      (setq org-agenda-sorting-strategy
            '((agenda time-up habit-down timestamp-up priority-down category-keep)
              (todo priority-down category-keep)
              (tags priority-down category-keep)
              (search category-keep)))
    #+end_src
    :PROPERTIES:
    :CREATED:  [2015-02-17 Tue 16:08]
    :END:
*** org-agenda-custom-commands
    #+begin_src emacs-lisp
      (setq
       org-agenda-custom-commands '(("n" "Agenda and all NEXT actions"
                                     ((agenda "")
                                      (todo "NEXT" nil)))
                                    ("v" "Videos to watch"
                                     tags "CATEGORY=\"ToWatch\"" nil)
                                    ;; TODO: consider only including those not under the appropriate level 1 heading
                                    ("f" "Bookmarks to file"
                                     ((todo "FILE")))
                                    ("u" "Upcoming next tasks"
                                     tags-todo "NEXT" nil)
                                    ("p" "Next actions of my projects"
                                     tags-todo "project" nil)))
    #+end_src
    :PROPERTIES:
    :CREATED:  [2015-02-17 Tue 16:08]
    :END:
*** org-agenda-time-grid
    #+begin_src emacs-lisp
      (setq org-agenda-time-grid
            '((daily today require-timed)
              #("----------------" 0 16
                (org-heading t))
              (800 1000 1200 1400 1600 1800 2000)))
    #+end_src
    :PROPERTIES:
    :CREATED:  [2015-02-17 Tue 16:08]
    :END:
*** org-habits
    #+begin_src emacs-lisp
     (setq
      org-habit-graph-column 65
      org-habit-following-days 1
      org-habit-graph-column 64
      org-habit-preceding-days 14
      org-habit-show-all-today nil
      org-habit-show-done-always-green t
     )
    #+end_src
    :PROPERTIES:
    :CREATED:  [2015-02-17 Tue 16:06]
    :END:
** org-capture-templates
   #+begin_src emacs-lisp
     (setq
      org-capture-templates '(
                              ("a" "Article"
                               entry (id "1c5d07ad-8ba3-4db9-b3ae-3f4441cf51ca")
                               "* TODO %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("b" "Bookmarks to file"
                               entry ( id "3693c528-9bfb-43c4-91e3-d68550fc4799" )
                               "* FILE %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("B" "Bookmarks to file (with link annotation)"
                               entry ( id "3693c528-9bfb-43c4-91e3-d68550fc4799" )
                               "* FILE %?%a -- \"%i\"\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("H" "Scheduled Task"
                               entry ( id "79c8de14-8039-4d8c-b87e-f8c499860694")
                               "* SCHED %?\nSCHEDULED: %t")
                              ("d" "Design Examples"
                               entry (id  "756f3a10-f323-409b-b418-00074ba93de9")
                               "* %? :GoodDesign:\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("D" "Task with a deadline"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* TODO %?\nDEADLINE: %t\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("h" "Habbit"
                               entry ( id "b8e8b020-2772-4028-b209-1a52d3cb2fe6")
                               "* HABIT %?\n:PROPERTIES:\n:STYLE: habit\n:END:")
                              ("j" "Datetree entry"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("J" "Clocked entry"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* %?\n%U"
                               :clock-in t
                               :clock-keep t)
                              ("k" "Book to read"
                               entry ( id "31b8afb4-8d11-4334-a12a-5f4490a77f3a")
                               "* SOMEDAY %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("m" "Good Song"
                               table-line (id "b3a14888-312d-432e-8062-4ed352866729")
                               " | %^{Title} | %^{Artist} |"
                               :immediate-finish t)
                              ;; ("n" "Task - Next"
                              ;;  entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                              ;;  "* NEXT %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("n" "Task - Next"
                               entry ( id "dd307243-992b-4454-86b7-929dbdc59f99")
                               "* NEXT %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("N" "Non-profit"
                               entry ( id "9e1cc358-cbc6-4b72-af68-c16017986720")
                               "* %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("o" "Toodledo Task"
                               entry ( id "dd307243-992b-4454-86b7-929dbdc59f99")
                               "* NEXT %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("p" "Person"
                               entry ( id "fbefa010-a0a4-4915-bc7e-ce1844a5e3a5")
                               "* %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("P" "Personal"
                               entry ( id "5baf8be5-b956-421a-950c-6e39c8e6d52e")
                               "* %?%a\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("s" "Scratch"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* %? :SCRATCH:\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("S" "Sent to Kindle"
                               entry ( id "baef29b1-40b5-4704-bf28-24b1898c41c9")
                               "* TODO %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("t" "Task"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* TODO %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("T" "Task (with link annotation)"
                               entry ( file+datetree "~/Documents/OrgMode/agenda.org")
                               "* TODO %?%a\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("u" "Quote"
                               entry (id "67e35685-d8e5-488d-8ab2-ac36a7ee3c9a")
                               "* %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("w" "To Watch"
                               entry ( id "e8e91a3d-d21b-403d-b46e-0be14a3d7c2d")
                               "* TODO %?\n:PROPERTIES:\n:CREATED:  %U\n:END:")
                              ("z" "Journal entry" plain ; From http://sachachua.com/blog/2014/11/using-org-mode-keep-process-journal/
                               (file+datetree+prompt "~/Documents/OrgMode/journal.org")
                               "%K - %a\n%i\n%?\n"))
      ;; org-capture-templates (("c" "Jac" entry (file+datetree "~/cjr/jac/jac.org")
      ;; "* %^{Title}  :blog:
      ;;  :PROPERTIES:
      ;;  :on: %T
      ;;  :END:
      ;;  %?
      ;;  %x"))
      )
   #+end_src
** org related global keybindings
   #+begin_src emacs-lisp
     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cb" 'org-iswitchb)
     (global-set-key (kbd "C-x c v") 'org-velocity-read)
     (global-set-key (kbd "C-c F") 'oog)
   #+end_src
** org-publish
   #+begin_src emacs-lisp
     (setq org-publish-project-alist
           '(
             ("org-contents"
              :base-directory "~/org/"
              :base-extension "org"
              :publishing-directory "~/public_html/org-site/"
              :recursive t
              :publishing-function org-publish-org-to-html
              :table-of-contents nil
              :section-numbers nil
              ;;:author nil
              ;;:creator-info nil
              :html-postamble nil
              :auto-sitemap t
              )
             ("org" :components ("org-contents"))))
   #+end_src
** org refiling
   #+begin_src emacs-lisp
     ;; org-refiling - http://kangtu.me/~kangtu/pavilion.html
     ;; Targets include this file
     ;; and any file contributing to the agenda - up to 9 levels deep
     ;; See also http://doc.norang.ca/org-mode.html#RefileSetup
     (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                      (org-agenda-files :maxlevel . 9))))
     ;; Use full outline paths for refile targets - we file directly with IDO
     (setq org-refile-use-outline-path t)

     ;; Targets complete directly with IDO / Helm
     (setq org-outline-path-complete-in-steps nil)

     ;; Allow refile to create parent tasks with confirmation
     (setq org-refile-allow-creating-parent-nodes (quote confirm))
   #+end_src
** org-expiry
   #+begin_src emacs-lisp
     (require 'org-expiry)
     (org-expiry-insinuate)
   #+end_src
** Reminders
   From http://doc.norang.ca/org-mode.html#Reminders
   Set up reminders for all upcoming appointments
   #+begin_src emacs-lisp
   ;; (defun bh/org-agenda-to-appt ()
   ;;   "Erase all reminders and rebuilt reminders for today from the agenda."
   ;;   (interactive)
   ;;   (setq appt-time-msg-list nil)
   ;;   (org-agenda-to-appt))

   ;; ;; Rebuild the reminders everytime the agenda is displayed
   ;; (add-hook 'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)

   ;; ;; This is at the end of my .emacs - so appointments are set up when Emacs starts
   ;; (bh/org-agenda-to-appt)

   ;; ;; Activate appointments so we get notifications
   ;; (appt-activate t)

   ;; ;; If we leave Emacs running overnight - reset the appointments one minute after midnight
   ;; (run-at-time "24:01" nil 'bh/org-agenda-to-appt)
   #+end_src
** org-protocol help
   From [[http://donarmstrong.com/posts/org_mode_mutt_capture:2F][Using Mutt with Org Mode (with refile)]]. I modified it so that org-capture-mode only closes other windows if its called via org-protocol.
   #+begin_src emacs-lisp
     (require 'org-protocol)
     (setq my-org-protocol-flag nil)
     (defun my-org-protocol-delete-other-windows ()
       (if my-org-protocol-flag (delete-other-windows)))
     (add-hook 'org-capture-mode-hook 'my-org-protocol-delete-other-windows)
     (defadvice org-capture-finalize (after delete-frame-at-end activate)
       "Delete frame at remember finalization"
       (progn (if my-org-protocol-flag (delete-frame))
              (setq my-org-protocol-flag nil)))
     (defadvice org-capture-refile (around delete-frame-after-refile activate)
       "Delete frame at remember refile"
       (if my-org-protocol-flag
           (progn
             (setq my-org-protocol-flag nil)
             ad-do-it
             (delete-frame))
         ad-do-it)
       )
     (defadvice org-capture-kill (after delete-frame-at-end activate)
       "Delete frame at remember abort"
       (progn (if my-org-protocol-flag (delete-frame))
              (setq my-org-protocol-flag nil)))
     (defadvice org-protocol-capture (before set-org-protocol-flag activate)
       (setq my-org-protocol-flag t))
   #+end_src
** Hide blocked tasks
   #+begin_src emacs-lisp :tangle no
     (defvar rfnash-hide-blocked-tasks nil "If non-nil, hide blocked tasks, else dim them.")
     (defun org-agenda-hide-blocked-tasks ()
       "Toggle dimming/hiding blocked tasks."
       (interactive)
       (if rfnash-hide-blocked-tasks
           (progn
             (setq rfnash-hide-blocked-tasks nil)
             (org-agenda-dim-blocked-tasks)
             )
         (progn
           (setq rfnash-hide-blocked-tasks t)
           (org-agenda-dim-blocked-tasks t))))
     (define-key org-agenda-mode-map (kbd "#") 'org-agenda-hide-blocked-tasks)
   #+end_src
   :PROPERTIES:
  :CREATED:  [2014-09-03 Wed 16:42]
  :END:
** [[http://www.emacswiki.org/emacs/download/org-occur-goto.el][org-occur-goto]]
   #+begin_src emacs-lisp
     ;;; org-occur-goto.el -- search open org buffers with an occur interface

     ;; This file is free software; you can redistribute it and/or modify
     ;; it under the terms of the GNU General Public License as published by
     ;; the Free Software Foundation; either version 2, or (at your option)
     ;; any later version.

     ;; This file is distributed in the hope that it will be useful,
     ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
     ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     ;; GNU General Public License for more details.

     ;; You should have received a copy of the GNU General Public License
     ;; along with GNU Emacs; see the file COPYING.  If not, write to the
     ;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
     ;; Boston, MA 02110-1301, USA.

     ;;; Commentary:
     ;;;
     ;;;
     ;;; Usage: M-x oog, then start typing
     ;;;
     ;;; select from the occur matches with up/down/pgup/pgdown and press enter
     ;;; (you can navigate the history with M-p/M-n)
     ;;;
     ;;; the search string must be at least 3 characters long (by default)
     ;;;


     (require 'cl)

     (defvar oog-idle-delay 0.5)

     (defvar oog-minimum-input-length 3)


     (defvar oog-map
       (let ((map (copy-keymap minibuffer-local-map)))
         (define-key map (kbd "<down>") 'oog-next-line)
         (define-key map (kbd "<up>") 'oog-previous-line)
         (define-key map (kbd "<prior>") 'oog-previous-page)
         (define-key map (kbd "<next>") 'oog-next-page)
         map))



     (defvar oog-history-list nil)


     (defun oog-previous-line ()
       (interactive)
       (oog-move-selection 'forward-line -1))


     (defun oog-next-line ()
       (interactive)
       (oog-move-selection 'forward-line 1))


     (defun oog-previous-page ()
       (interactive)
       (oog-move-selection 'scroll-down nil))


     (defun oog-next-page ()
       (interactive)
       (oog-move-selection 'scroll-up nil))


     (defun oog-move-selection (movefunc movearg)
       (let ((win (get-buffer-window "*Occur*")))
         (if win
             (with-selected-window win
               (condition-case nil
                   (funcall movefunc movearg)
                 (beginning-of-buffer (goto-char (point-min)))
                 (end-of-buffer (goto-char (point-max))))))))


     (defun oog-check-input ()
       (when (sit-for oog-idle-delay)
         (unless (equal (minibuffer-contents) oog-current-input)
           (setq oog-current-input (minibuffer-contents))

           (if (< (length oog-current-input) oog-minimum-input-length)
               (let ((win (get-buffer-window "*Occur*")))
                 (if win
                     (with-selected-window win
                       (setq buffer-read-only nil)
                       (erase-buffer))))

             (save-excursion
               (flet ((message (&rest args) nil))  ;; suppress occur messages
                 (multi-occur
                  (remove nil (mapcar (lambda (buffer)
                                        (with-current-buffer buffer
                                          (if (eq major-mode 'org-mode)
                                              buffer)))
                                      (buffer-list)))
                  oog-current-input))
               (if (get-buffer "*Occur*")
                   ;; put cursor on first matching line for convenience
                   (let ((win (get-buffer-window "*Occur*")))
                     (if win
                         (with-selected-window win
                           (forward-line))))
                 (message "No matches.")))))))



     (defun oog ()
       (interactive)
       (let ((cursor-in-non-selected-windows 'box)
             marker)
         (save-window-excursion
           (add-hook 'post-command-hook 'oog-check-input)
           (setq oog-current-input nil)

           (unwind-protect
               (let ((minibuffer-local-map oog-map))
                 (read-string "string: " nil 'oog-history-list))

             (remove-hook 'post-command-hook 'oog-check-input))

           (let ((buf (get-buffer "*Occur*")))
             (if buf
                 (with-current-buffer buf
                   (unless (= (buffer-size) 0)
                     (setq marker (occur-mode-find-occurrence)))))))

         (switch-to-buffer (marker-buffer marker))
         (goto-char marker)
         (when (outline-invisible-p)
           (save-excursion
             (outline-previous-visible-heading 1)
             (org-show-subtree)))))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:27]
   :END:
** org-page (no longer used)
   #+begin_src emacs-lisp :tangle no
     (require 'org-page)
   #+end_src
** TODO org-registry
   #+begin_src emacs-lisp
     (require 'org-registry)
     (org-registry-initialize)
     ;; (org-registry-insinuate)                ; Calls org-registry-update on save, but slows down org a lot

     ;;; Slightly modified org-registry-show from org-registry.el
     ;;; TODO: I could probably rewrite most of this function to use helm
     (defun rfnash-org-registry-show (visit link)
       "Show Org files where there are links pointing to the current
     buffer."
       ;; Not sure if I should use M on s in interactive
       (interactive "P\nMlink: ")
       (org-registry-initialize)
       (let* ((files (org-registry-assoc-all link))
              file point selection tmphist)
         (cond ((and files visit)
                ;; result(s) to visit
                (cond ((< 1 (length files))
                       ;; more than one result
                       (setq tmphist (mapcar (lambda(entry)
                                               (format "%s (%d) [%s]"
                                                       (nth 3 entry) ; file
                                                       (nth 2 entry) ; point
                                                       (nth 1 entry))) files))
                       (setq selection (completing-read "File: " tmphist
                                                        nil t nil 'tmphist))
                       (string-match "\\(.+\\) (\\([0-9]+\\))" selection)
                       (setq file (match-string 1 selection))
                       (setq point (string-to-number (match-string 2 selection))))
                      ((eq 1 (length files))
                       ;; just one result
                       (setq file (nth 3 (car files)))
                       (setq point (nth 2 (car files)))))
                ;; visit the (selected) file
                (funcall org-registry-find-file file)
                (goto-char point)
                (unless (org-before-first-heading-p)
                  (org-show-context)))
               ((and files (not visit))
                ;; result(s) to display
                (cond  ((eq 1 (length files))
                        ;; show one file
                        (message "Link in file %s (%d) [%s]"
                                 (nth 3 (car files))
                                 (nth 2 (car files))
                                 (nth 1 (car files))))
                       (t (org-registry-display-files files link))))
               (t (message "No link to this in org-agenda-files")))))

     (defun rfnash-org-registry-show-clipboard (visit)
       (interactive "P")
       (rfnash-org-registry-show visit (x-get-clipboard)))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-26 Thu 16:00]
   :END:
** org-modules
   Require all of the org-mode modules that I use.
   #+begin_src emacs-lisp
     ;; http://orgmode.org/worg/org-contrib/
     (require 'org-agenda)                      ; add (load-library "org-compat")
     (require 'org-annotate-file)
     (require 'org-bbdb)
     (require 'org-bibtex)                      ; export bibtex fragments(require '
     (require 'org-bookmark)
     (require 'org-capture)
     (require 'org-checklist)
     (require 'org-choose)                      ; http://orgmode.org/worg/org-contrib/org-choose.html
     (require 'org-collector)                   ; http://orgmode.org/worg/org-contrib/org-collector.html
     (require 'org-contacts)
     (require 'org-ctags)
     ;; (require org-depend)                    ; http://orgmode.org/worg/org-contrib/org-depend.html
     (require 'org-drill)
     (require 'org-elisp-symbol)
     (require 'org-eshell)
     (require 'org-eval)
     (require 'org-eval-light)
     (require 'org-expiry)
     (require 'org-git-link)
     (require 'org-gnus)
     (require 'org-habit)
     (require 'org-id)
     ;; (require org-index)                     ; http://orgmode.org/worg/org-contrib/org-index.html
     (require 'org-info)
     (require 'org-inlinetask)
     ;;(require 'org-json)
     (require 'org-learn)
     (require 'org-man)
     (require 'org-mobile)
     (require 'org-mouse)
     ;;(require 'org-mtags)
     ;; (require org-occur-goto)                ; http://www.emacswiki.org/emacs/org-search-goto.el
     ;;(require 'org-panal)
     (require 'org-protocol)
     ;; (require org-search-goto)               ; http://www.emacswiki.org/emacs/org-search-goto.el
     ;;(require org-search-goto-ml)               ;  http://www.emacswiki.org/emacs/org-search-goto-ml.el
     (require 'org-secretary)                   ; http://juanreyero.com/article/emacs/org-teams.html
     (require 'org-toc)
     (require 'org-track)                       ; http://orgmode.org/worg/org-contrib/org-track.html
     (require 'org-velocity)                    ; http://orgmode.org/worg/org-contrib/org-velocity.html
     (require 'org-w3m)
     (require 'remember)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:42]
   :END:
** TODO OrgBox
   Just trying it out.
   #+begin_src emacs-lisp
     (prelude-require-package 'orgbox)
     (require 'orgbox)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-22 Wed 22:31]
   :END:
** [[https://github.com/jplindstrom/emacs-org-transform-tree-table][org-transform-tree-table]]
   #+begin_src emacs-lisp
     (prelude-require-package 'org-transform-tree-table)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-12-29 Mon 19:00]
   :END:
** org-cliplink
#+begin_src emacs-lisp
  (prelude-require-package 'org-cliplink)
#+end_src
  :PROPERTIES:
  :CREATED:  [2014-11-21 Fri 17:28]
  :END:
* Networking
  :PROPERTIES:
  :CREATED:  [2014-11-28 Fri 18:50]
  :END:
** Twitter
   #+begin_src emacs-lisp
     (setq twittering-use-master-password t)
     (prelude-require-package 'twittering-mode)
     ;; (twit)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-11-18 Tue 15:12]
   :END:
** BBDB
   #+begin_src emacs-lisp
     (prelude-require-package 'bbdb)
     (setq bbdb-file "~/.emacs.d/prelude/savefile/bbdb")
     (require 'bbdb)
     (bbdb-initialize 'gnus 'message)
     (bbdb-insinuate-message)
     (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
     (add-hook 'kill-emacs-hook 'bbdb-save)
     ;;(prelude-require-package 'bbdb-vcard)
   #+end_src
** helm-mu
   #+begin_src emacs-lisp
     (add-to-list 'load-path (expand-file-name "helm-mu" prelude-vendor-dir))
     ;;(require 'helm-mu)
   #+end_src
** EWW
   #+begin_src emacs-lisp
     (prelude-require-package 'eww-lnum)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-29 Wed 18:37]
   :END:
** Default browser
   Set the default browser to vimb.
   #+begin_src emacs-lisp
     (setq browse-url-browser-function
           'browse-url-generic browse-url-generic-program "firefox")
   #+end_src
** TODO set-browser
   A function to easily interactively change the default browser.
   TODO: include a list of browsers to choose from.
   #+begin_src emacs-lisp
     (defun set-browser (browser)
       "Prompt for BROWSER to set as default."
       (interactive "sBrowser: ")
       (setq browse-url-browser-function
             'browse-url-generic browse-url-generic-program browser))
   #+end_src
** ERC
   My personal ERC config.
   From emacswiki.org/emacs/ERC.
   #+begin_src emacs-lisp
     ;; (setq erc-echo-notices-in-minibuffer-flag t)

     ;; (require 'erc-match)
     ;; (setq erc-keywords '("Niki" "Nikki"))

     ;; ;; Doesn't seem to work
     ;; (require 'notifications)
     ;; (defun erc-global-notify (match-type nick message)
     ;;   "Notify when a message is recieved."
     ;;   (notifications-notify
     ;;    :title nick
     ;;    :body message
     ;;    :urgency 'low))
     ;; (add-hook 'erc-text-matched-hook 'erc-global-notify)


     ;; ;; Creates new buffer each time someone pm's me
     ;; ;; opens second window and shows buffer in non-focused window
     ;; ;; This happens even on different screen in elscreen
     ;; (setq erc-auto-query 'buffer)
     ;; (add-hook 'erc-after-connect
     ;;        (lambda (server nick)
     ;;          (add-hook 'erc-server-NOTICE-hook 'erc-auto-query)))

     ;; ;; Doesn't seem to work
     ;; (setq erc-autojoin-channels-alist
     ;;       '(("***REMOVED***.com" "#lesbian" "#sub/Dom" "#sluts_craving_humiliation")))
     ;;      ;;("oftc.net" "#bitlbee")))

     (add-to-list 'load-path "~/.emacs.d/prelude/personal")
     (prelude-require-package 'znc)
     (require 'erc)
     ;;(require 'erc-nicklist)
     (setq znc-servers '(("localhost" 1666 t ((efnet "rfnash/efnet" "***REMOVED***")
                                              (freenode "rfnash/freenode" "***REMOVED***")
                                              (mozilla "rfnash/mozilla" "***REMOVED***")
                                              (bitlbee "rfnash/bitlbee" "***REMOVED***")
                                              (***REMOVED*** "rfnash/***REMOVED***" "***REMOVED***")))))
     (setq erc-nicklist-voiced-position 'top)

     (autoload 'erc-nick-notify-mode "erc-nick-notify"
       "Minor mode that calls `erc-nick-notify-cmd' when his nick gets
     mentioned in an erc channel" t)
     ;; (eval-after-load 'erc '(erc-nick-notify-mode t))
   #+end_src
** Circe
   #+begin_src emacs-lisp
     (prelude-require-package 'circe)
     (require 'circe)
     (setq circe-network-options
           '(("***REMOVED***"
             :host "***REMOVED***.com"
             :service "6667"
             :nick "Niki"
             :realname "22 F Female Bi MI USA"
             :nickserv-password "***REMOVED***")))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-20 Fri 22:25]
   :END:
** mu4e
   My personal mu4e config.
   #+begin_src emacs-lisp
     (add-to-list 'load-path (expand-file-name "mu/mu4e" prelude-vendor-dir))
     (require 'mu4e)
     (setq mu4e-mu-binary "~/.local/bin/mu"   ;; use local version of mu
           mu4e-maildir       "~/Maildir"       ;; top-level Maildir
           mu4e-sent-folder   "/Sent"           ;; folder for sent messages
           mu4e-drafts-folder "/Drafts"         ;; unfinished messages
           mu4e-trash-folder  "/Trash"          ;; trashed messages
           mu4e-refile-folder "/archive"        ;; saved messages
           mu4e-get-mail-command "")
     (add-to-list 'mu4e-view-actions
                                             ; Open message in external browser with 'x' as the shortcut
                  '("xview in browser" . mu4e-action-view-in-browser) t)
     (add-hook 'mu4e-view-mode-hook 'wrap-to-fill-column-mode)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:41]
   :END:
** newsticker
   #+begin_src emacs-lisp
     (require 'newsticker)
     (global-set-key (kbd "C-c r") 'newsticker-treeview)
     (setq newsticker-html-renderer 'w3m-region)
     '(newsticker-url-list
       (quote
        (("HMK's Spurious Thoughts" "http://www.spuriousthoughts.com/feed/atom/" nil nil nil)
         ("The Paleo Pair" "http://thepaleopair.tumblr.com/rss" nil nil nil)
         ("The NewsBlur Blog" "http://blog.newsblur.com/rss" nil nil nil)
         ("Tom Morris" "http://tommorris.org/posts.xml" nil nil nil)
         ("Less Wrong" "http://lesswrong.com/.rss" nil nil nil)
         ("A Life Less Bullshit" "http://feeds.feedburner.com/lifelessbullshit?format=xml" nil nil nil)
         ("Mostly Harmless" "http://robrhinehart.com/?feed=rss2" nil nil nil)
         ("Adam Prescott" "https://aprescott.com/feed" nil nil nil)
         ("Ben Werdmuller" "http://benwerd.com/feed/" nil nil nil)
         ("Comments on: Home" "http://www.alifeonyourterms.com/home/feed/" nil nil nil)
         ("The Pidgeonhole Principal" "http://joneisen.tumblr.com/rss" nil nil nil)
         ("Robert Heaton" "http://feeds.feedburner.com/RobertHeaton?format=xml" nil nil nil)
         ("Marco.org" "http://www.marco.org/rss" nil nil nil)
         ("Justin Vincent" "http://justinvincent.com/feed" nil nil nil)
         ("copyrighteous" "http://mako.cc/copyrighteous/feed" nil nil nil)
         ("SlashGeek" "http://www.slashgeek.net/feed/" nil nil nil)
         ("kyleisom.net" "http://www.kyleisom.net/feed.xml" nil nil nil)
         ("Emacs Redux" "http://emacsredux.com/atom.xml" nil nil nil)
         ("What the .emacs.d!?" "http://whattheemacsd.com/atom.xml" nil nil nil)
         ("Bapt" "http://blog.etoilebsd.net/index.atom" nil nil nil)
         ("Hile Household" "http://hilehousehold.squarespace.com/journal?format=rss" nil nil nil)
         ("Mostly Maths" "http://feeds.feedburner.com/MostlyMaths" nil nil nil)
         ("The Friendly Anarchist" "http://feeds.feedburner.com/FriendlyAnarchist" nil nil nil)
         ("plasticbag.org" "http://plasticbag.org/feed" nil nil nil)
         ("Mottr.am" "http://mottr.am/atom.xml" nil nil nil)
         ("Signal vs. Noise" "http://feeds.feedburner.com/37signals/beMH" nil nil nil)
         ("Andy Mangold on scriptogr.am" "http://feeds.feedburner.com/andymangold?format=xml" nil nil nil)
         ("The Buffer blog: productivity, life hacks, writing..." "http://feeds.feedburner.com/bufferapp" nil nil nil)
         ("Dustin Curtis" "http://feeds.feedburner.com/dcurtis" nil nil nil)
         ("Debu.gs" "http://feeds.feedburner.com/debugs" nil nil nil)
         ("Inside 206-105" "http://feeds.feedburner.com/ezyang" nil nil nil)
         ("Infotropism" "http://infotrope.net/feed/" nil nil nil)
         ("Startups, life, learning and happiness" "http://feeds.feedburner.com/joelis" nil nil nil)
         ("Tiny Buddha" "http://tinybuddha.com/feed/" nil nil nil)
         ("Raptitude.com" "http://feeds2.feedburner.com/Raptitudecom" nil nil nil)
         ("Tynan | Life Outside the Box" "http://feeds.feedburner.com/tynan?format=xml" nil nil nil)
         ("zenhabits" "http://zenhabits.net/feed/" nil nil nil)
         ("Lifehacker" "http://feeds.gawker.com/lifehacker/vip" nil nil nil)
         ("mnmlist" "http://mnmlist.com/feed/" nil nil nil)
         ("Nathan's Blog" "http://blog.nathantypanski.com/rss" nil nil nil)
         ("Lost in Technopolis" "http://newartisans.com/feed/" nil nil nil)
         ("Poly in Pictures" "http://www.polyinpictures.com/feed/" nil nil nil)
         ("Practically Efficient" "http://feeds.feedburner.com/PracticallyEfficient" nil nil nil)
         ("programming is terrible" "http://programmingisterrible.com/rss" nil nil nil)
         ("Rands In Repose" "http://www.randsinrepose.com/index.xml" nil nil nil)
         ("Blog" "http://paulwhile.squarespace.com/blog/rss.xml" nil nil nil)
         ("simple links" "http://zenhabits.tumblr.com/rss" nil nil nil)
         ("The Setup" "http://usesthis.com/feed/" nil nil nil)
         ("We Use That" "http://weusethat.com/rss.xml" nil nil nil)
         ("Under the Tamarind Tree" "https://underthetamarindtree.wordpress.com/feed/" nil nil nil)
         ("Falkvinge on Infopolicy" "http://feeds.falkvinge.net/Falkvinge-on-Infopolicy" nil nil nil)
         ("Matt Might's blog" "http://matt.might.net/articles/feed.rss" nil nil nil)
         ("Simplexify" "http://simplexify.net/blog/atom.xml" nil nil nil)
         ("SMYCK" "http://smyck.net/feed/" nil nil nil)
         ("The Pastry Box Project" "http://the-pastry-box-project.net/feed/" nil nil nil)
         ("skud" "http://skud.dreamwidth.org/data/atom" nil nil nil)
         ("One Thing Well" "http://onethingwell.org/rss" nil nil nil)
         ("jake levine" "http://jakelevine.me/blog/feed/" nil nil nil)
         ("Steve Losh" "http://feeds2.feedburner.com/stevelosh" nil nil nil)
         ("DAILY VIOLET" "http://violetblue.tumblr.com/rss" nil nil nil)
         ("violet blue ® :: open source sex" "http://www.tinynibbles.com/feed" nil nil nil)
         ("This View of Life" "http://www.thisview.org/?feed=rss2" nil nil nil)
         ("Zack Shapiro" "http://zackshapiro.com/rss" nil nil nil)
         ("Zack Shapiro" "http://feeds.feedburner.com/zackshapiro/glGU" nil nil nil)
         ("Send More Paramedics" "http://blog.fogus.me/feed/" nil nil nil))))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:41]
   :END:
** Gnus
   #+begin_src emacs-lisp
    (setq gnus-init-file (expand-file-name "rfnash-gnus.el" prelude-personal-dir))
    (require 'rfnash-gnus)
  #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:54]
   :END:
* Emacs
** Misc Prelude settings
   #+begin_src emacs-lisp
     (setq prelude-clean-whitespace-on-save nil)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-07 Sat 22:40]
   :END:
** Load [[http://batsov.com/prelude/][Emacs Prelude]] modules
   #+begin_src emacs-lisp
     ;;; Uncomment the modules you'd like to use and restart Prelude afterwards
     (require 'prelude-erc)                  ; Emacs IRC client
     (require 'prelude-ido)                  ; Super charges Emacs completion for C-x C-f and more
     (require 'prelude-helm)                 ; Interface for narrowing and search
     (require 'prelude-company)
     (require 'prelude-key-chord)            ; Binds useful features to key combinations

     ;;; Programming languages support
     (require 'prelude-emacs-lisp)
     (require 'prelude-lisp)
     (require 'prelude-org)                  ; Org-mode helps you keep TODO lists, notes and more
     (require 'prelude-scheme)
     (require 'prelude-shell)
     (require 'prelude-clojure)
     (require 'prelude-haskell)
   #+end_src
** Set the default directory to HOME
   #+begin_src emacs-lisp
     (setq default-directory "~")
   #+end_src
** smart-tab and hippie-expand
   #+begin_src emacs-lisp
     (prelude-require-package 'smart-tab)
     (require 'smart-tab)
     (add-to-list 'smart-tab-disabled-major-modes 'agda2-mode)
     (global-smart-tab-mode 1)
     (define-key read-expression-map [(tab)] 'hippie-expand)
   #+end_src
** elscreen
   #+begin_src emacs-lisp
     (prelude-require-package 'elscreen)
   #+end_src
** switch-window
   #+begin_src emacs-lisp
     (prelude-require-package 'switch-window)
     (global-set-key (kbd "C-x o") 'switch-window)
   #+end_src
** Require various packages
   #+begin_src emacs-lisp
     (prelude-require-packages '(helm-orgcard helm-descbinds helm-backup helm-helm-commands))
     (prelude-require-packages '(ag helm-ag helm-ag-r))
     (prelude-require-packages '(caskxy graphviz-dot-mode))
     (prelude-require-package 'elnode)
     (prelude-require-package 'unbound)
   #+end_src
** Default Font
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :family "Liberation Mono for Powerline" :height 120)
   #+end_src
** Term Mode
   #+begin_src emacs-lisp
     (require 'term)
     (setq term-scroll-to-bottom-on-output t)

     ;; (setq term-mode-hook '((lambda nil
     ;;                          ;; To use new deftheme instead of color-theme
     ;;                          ;;                         (load-theme-buffer-local
     ;;                          ;;                         'solarized-dark
     ;;                          ;;                          (current-buffer)
     ;;                          ;;                          t)))

     ;;                          ;; (color-theme-buffer-local
     ;;                          ;;  (quote color-theme-solarized-dark)
     ;;                          ;;  (current-buffer))
     ;;                          (setq-local dark t)
     ;;                          (load-theme-buffer-local
     ;;                           'solarized-dark
     ;;                           (current-buffer) t nil))))

     ;; ;; TODO: is probably a bad idea to set this here. Find a better way.
     ;; (custom-set-faces
     ;;  ;; custom-set-faces was added by Custom.
     ;;  ;; If you edit it by hand, you could mess it up, so be careful.
     ;;  ;; Your init file should contain only one such instance.
     ;;  ;; If there is more than one, they won't work right.
     ;;  '(term ((t (:inherit default :background "#002b36"))))
     ;;  '(term-bold ((t (:inverse-video t :weight bold))))
     ;;  '(term-color-black ((t (:background "#002b36" :foreground "#073642"))))
     ;;  '(term-color-blue ((t (:background "#002b36" :foreground "#268bd2"))))
     ;;  '(term-color-cyan ((t (:background "#002b36" :foreground "#2aa198"))))
     ;;  '(term-color-green ((t (:background "#002b36" :foreground "#859900"))))
     ;;  '(term-color-magenta ((t (:background "#002b36" :foreground "#d33682"))))
     ;;  '(term-color-red ((t (:background "#002b36" :foreground "#dc322f"))))
     ;;  '(term-color-white ((t (:background "#002b36" :foreground "#eee8d5"))))
     ;;  '(term-color-yellow ((t (:background "#002b36" :foreground "#b58900")))))
   #+end_src
** Color Theme
   My settings to use the solarized light color theme.
   #+begin_src emacs-lisp
     ;; Set up the old-fashioned Solarized color theme
     ;; and set ansi-term to use solarized dark colors

     ;; Could be a coincidence, but since adding Solarized,
     ;; but I can't get 'Emacs --daemon' to work

     ;; (prelude-require-packages '(solarized-theme load-theme-buffer-local color-theme color-theme-buffer-local color-theme-solarized))

     ;; (setq light t)           ; setting to t works and remove undefined var error
     ;;(load-theme 'solarized-light t)
     ;;(if (display-graphic-p)
     ;;    (load-theme 'solarized-light t)
     ;;  (load-theme 'solarized-dark t))

     (disable-theme 'zenburn)
     (prelude-require-package 'color-theme-solarized)
     (set-frame-parameter nil 'background-mode 'dark)
     (load-theme 'solarized t)

     (defun rfnash-solarized-light ()
       (interactive)
       (disable-theme 'zenburn)
       (set-frame-parameter nil 'background-mode 'light)
       (enable-theme 'solarized)
       (set-face-attribute 'org-scheduled-today nil :foreground "darkgreen") ; orginal color
       (set-face-attribute 'org-warning nil :weight 'bold)
       (set-face-attribute 'org-todo nil :inherit 'org-todo))

     (defun rfnash-solarized-dark ()
       (interactive)
       (disable-theme 'zenburn)
       (set-frame-parameter nil 'background-mode 'dark)
       (enable-theme 'solarized)
       (set-face-attribute 'org-scheduled-today nil :foreground "#4df946")
       (set-face-attribute 'org-warning nil :weight 'bold)
       ;; TODO: Doesn't show up while highlighted (point is on same line)
       (set-face-attribute 'org-todo nil :inverse-video t))

     (defun rfnash-zenburn ()
       (interactive)
       (disable-theme 'solarized)
       (enable-theme 'zenburn)
       ;; Colors from habit grid
       (set-face-attribute 'org-warning nil :foreground "firebrick" :weight 'bold)
       (set-face-attribute 'org-upcoming-deadline nil :foreground "darkgoldenrod"))

     (defun rfnash-helm-theme ()
       "helm interface to let my chose one of my customized themes"
       (interactive)
       (helm :sources `(
                        ((name . "My colorthemes")
                         (candidates . (("zenburn" . rfnash-zenburn)
                                        ("solarized-light" . rfnash-solarized-light)
                                        ("solarized-dark" . rfnash-solarized-dark)))
                         (action . (("Apply Theme" . (lambda (x) (apply x ())))))))))

     (global-set-key (kbd "C-x c t") #'rfnash-helm-theme)

     ;; (require 'color-theme)
     ;; (color-theme-solarized-light)
   #+end_src
   :PROPERTIES:
  :CREATED:  [2014-09-03 Wed 16:41]
   :END:
** El-get
   Install and configure various packages through el-get.
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

     (require 'el-get nil t)                       ; to appease flycheck
     (unless (require 'el-get nil t)
       (url-retrieve
        "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
        (lambda (s)
          (end-of-buffer)
          (eval-print-last-sexp))))

     ;; now either el-get is `require'd already, or have been `load'ed by the
     ;; el-get installer.

     ;; set local recipes
     (setq
      el-get-sources
      '((:name el-get)          ; el-get is self-hosting
        ;; (:name o-blog)       ; version in package.el doesn't work
        (:name pwsafe :after (setq pwsafe-primary-database "~/Dropbox/pwsafe/pwsafe.dat"))
        ;; (:name org-mode)
        (:name erc-extras)
        (:name erc-nick-notify)
        (:name emacs-http-server)
        (:name webkit)
        (:name howm)
        (:name ProofGeneral)
        ;;(:name bbdb-vcard)
        ;; (:name bbdb (progn
        ;;                    (setq bbdb-file "~/.emacs.d/bbdb")
        ;;                    (require 'bbdb)
        ;;                    (bbdb-initialize 'gnus 'message)
        ;;                    (bbdb-insinuate-message)
        ;;                    (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
        ;;                     (add-hook 'kill-emacs-hook 'bbdb-save)))
        ))

     ;; Adds packages from local recipes above
     (setq my:el-get-packages
           (loop for src in el-get-sources collect (el-get-source-name src)))

     ;; install new packages and init already installed packages
     (el-get 'sync my:el-get-packages)

   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:41]
   :END:
** Helm
   My personal customization to helm.
   #+begin_src emacs-lisp
     (require 'helm)
     (require 'helm-config)

     ;; Doesn't override ido for find files, but does for C-h f, so perfect
     (helm-mode 1)

     ;; I prefer helm over smex
     (global-set-key (kbd "M-x") 'helm-M-x)

     ;; not sure if I really want to enable or not
     ;; (add-hook 'eshell-mode-hook
     ;;           #'(lambda ()
     ;;               (define-key eshell-mode-map
     ;;                 [remap eshell-pcomplete]
     ;;                 'helm-esh-pcomplete)))

     (global-set-key (kbd "C-x c o") 'helm-occur)

     ;; Doesn't play well with gnus
     ;;(setq helm-split-window-in-side-p t)


     ;; added (find-file . ido) as I prefer ido's find-file interface to helm's,
     ;; but prefer helm for everything else.
     (add-to-list 'helm-completing-read-handlers-alist '(find-file . ido))
     (add-to-list 'helm-completing-read-handlers-alist '(switch-to-buffer . ido))

     ;; Increased from 0.1 to 0.5 (the value used by org-occur-goto)
     ;; because of the long time it takes to search
     (setq helm-m-occur-idle-delay 0.5)

     ;; https://github.com/emacs-helm/helm-descbinds
     (prelude-require-package 'helm-descbinds)
     (helm-descbinds-mode)

     (require 'ido)
     (setq ido-everywhere t)
     (setq ido-ignore-buffers helm-boring-buffer-regexp-list)
     (ido-mode 1)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:54]
   :END:
** rfnash-switch-buffer
#+begin_src emacs-lisp
  ;; Based on http://emacsredux.com/blog/2013/03/29/terminal-at-your-fingertips/

  (defun rfnash-switch-buffer (buffer)
    "Switch to BUFFER using elscreen if possible;
            if not, use 'switch-to-buffer-other-window'"
    (if (fboundp 'elscreen-find-and-goto-by-buffer)
        (elscreen-find-and-goto-by-buffer buffer t)
      (switch-to-buffer buffer)))

  (defun rfnash-visit-org-notes-buffer ()
    "Visit my notes.org buffer."
    (interactive)
    (if (get-buffer "notes.org")
        (rfnash-switch-buffer "notes.org")))

  (defun rfnash-visit-org-agenda-buffer ()
    "Create or visit 'org-mode' agenda buffer."
    (interactive)
    (if (get-buffer "*Org Agenda*")
        (rfnash-switch-buffer "*Org Agenda(n)*")
      (org-agenda nil "n")))

  (defun rfnash-visit-term-buffer ()
    "Create or visit term buffer."
    (interactive)
    (if (get-buffer "*ansi-term*")
        (rfnash-switch-buffer "*ansi-term*")
      (ansi-term "tmux-attach")))

  (defun rfnash-visit-eshell-buffer ()
    "Create or visit an eshell buffer."
    (interactive)
    (if (get-buffer "*eshell*")
        (rfnash-switch-buffer "*eshell*")
      (eshell)))

  (defun rfnash-visit-gnus-buffer ()
    "Create or visit GNUS's group buffer."
    (interactive)
    (if (get-buffer "*Group*")
        (rfnash-switch-buffer "*Group*")
      (gnus)))

  (defun rfnash-visit-mu4e-buffer ()
    "Create or visit mu4e's main buffer."
    (interactive)
    (if (get-buffer "*mu4e-main*")
        (rfnash-switch-buffer "*mu4e-main*")
      (mu4e)))

  (defun rfnash-visit-scratch-buffer ()
    "Visit *scratch* buffer."
    (interactive)
    (if (get-buffer "*scratch*")
        (rfnash-switch-buffer "*scratch*")
      (if (fboundp 'elscreen-create)
          (elscreen-create)
        (progn
          (switch-to-buffer (get-buffer-create "*scratch*"))
          (lisp-interaction-mode)))))

  (defun rfnash-visit-packages-buffer ()
    "Visit buffer of package.el packages"
    (interactive)
    (if (get-buffer "*Packages*")
        (rfnash-switch-buffer "*Packages*")
      (paradox-list-packages nil)))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 20:32]
:END:
** rfnash-horizontal-recenter
#+begin_src emacs-lisp
  ;; From http://stackoverflow.com/a/1249665
  (defun rfnash-horizontal-recenter ()
    "Make the point horizontally centered in the window."
    (interactive)
    (let ((mid (/ (window-width) 2))
          (line-len (save-excursion (end-of-line) (current-column)))
          (cur (current-column)))
      (if (< mid cur)
          (set-window-hscroll (selected-window)
                              (- cur mid)))))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 20:35]
:END:
** rfnash-scroll-left-edge
#+begin_src emacs-lisp
  (defun rfnash-scroll-left-edge ()
    "Like `my-horizontal-recenter', but place point at the left edge of the window."
    (interactive)
    (set-window-hscroll (selected-window) (current-column)))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 20:36]
:END:
** browse-weather
#+begin_src emacs-lisp
  (defun browse-weather ()
    "Look up the current weather on forecast.io."
    (interactive)
    (browse-url "http://forecast.io/"))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 20:37]
:END:
** rfnash-helm-org-swoop
#+begin_src emacs-lisp
  (defun rfnash-helm-org-swoop ()
    "Run `'helm-multi-swoop' with `org-buffer-list'"
    (interactive)
    (helm-multi-swoop nil (mapcar #'buffer-name (org-buffer-list))))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 20:38]
:END:
** prelude mode
   Emacs Prelude: minor mode.
   #+begin_src emacs-lisp
     (require 'prelude-mode)

     (global-set-key (kbd "C-c x l") 'rfnash-scroll-left-edge)
     (global-set-key (kbd "C-S-L") 'rfnash-scroll-left-edge)

     (define-key prelude-mode-map (kbd "C-x F") #'browse-weather)

     (define-key prelude-mode-map (kbd "C-c i") #'prelude-ido-goto-symbol)
     (define-key prelude-mode-map (kbd "C-c o") (lambda () (interactive) (helm-multi-occur (org-buffer-list))))
     (define-key prelude-mode-map (kbd "C-c O") #'prelude-open-with)
     (define-key prelude-mode-map (kbd "C-c h") #'rfnash-visit-org-agenda-buffer)
     (define-key prelude-mode-map (kbd "C-c g") #'rfnash-visit-gnus-buffer)
     (define-key prelude-mode-map (kbd "C-c m") #'rfnash-visit-mu4e-buffer)
     (define-key prelude-mode-map (kbd "C-c G") #'prelude-google)
     (define-key prelude-mode-map (kbd "C-c s") #'rfnash-visit-scratch-buffer)
     (define-key prelude-mode-map (kbd "C-c S") #'prelude-swap-windows)
     (define-key prelude-mode-map (kbd "C-c ;") #'comment-region)
     (define-key prelude-mode-map (kbd "C-x t") #'rfnash-open-calendar)
     (define-key prelude-mode-map (kbd "C-x x") #'sauron-toggle-hide-show)
     (define-key prelude-mode-map (kbd "C-x c p") #'rfnash-visit-packages-buffer)
     (define-key prelude-mode-map (kbd "C-x c s") #'helm-surfraw)
     (define-key prelude-mode-map (kbd "C-x ,") #'rename-buffer)
     (define-key prelude-mode-map (kbd "C-x c h") #'helm-mini)

     (define-key oog-map (kbd "C-n") #'oog-next-line)
     (define-key oog-map (kbd "C-p") #'oog-previous-line)
     (define-key oog-map (kbd "C-v") #'oog-previous-page)
     (define-key oog-map (kbd "M-v") #'oog-next-page)

     (require 'gnus-art)
     (define-key gnus-article-mode-map (kbd "i") #'gnus-article-show-images)
     (define-key gnus-summary-mode-map (kbd "i") #'gnus-article-show-images)

     ;;; From https://github.com/magnars/hardcore-mode.el
     ;; Use shell-like backspace C-h, rebind help to F1
     (define-key key-translation-map [?\C-h] [?\C-?])
     (global-set-key (kbd "<f1>") #'help-command)

     ;; (global-set-key "\C-cT" #'rfnash-visit-term-buffer)
     ;; (global-set-key "\C-ct" #'rfnash-visit-eshell-buffer)

     (defun rfnash-org-refile (&rest args)
       (interactive)
       (let ((helm-candidate-number-limit nil)) (apply #'org-refile args)))

     (define-key org-mode-map (kbd "C-c C-w") #'rfnash-org-refile)
     (define-key org-agenda-mode-map (kbd "C-c C-w") #'rfnash-org-refile)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:42]
   :END:
** paradox
   #+begin_src emacs-lisp
     (prelude-require-package 'paradox)
     '(setq paradox-automatically-star t)
   #+end_src
** Faces
   #+begin_src emacs-lisp
     (set-face-attribute 'org-agenda-clocking nil :inherit 'org-scheduled :background "#268bd2")
     (set-face-attribute 'org-agenda-current-time nil :inherit 'org-time-grid :background "light green")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-07 Sat 22:46]
   :END:
** Mode Line
   #+begin_src emacs-lisp
     (prelude-require-package 'smart-mode-line)
     (sml/setup)
     (sml/apply-theme 'respectful)
     (setq rm-whitelist '(""))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-23 Mon 11:38]
   :END:
* Misc
** Info additional directory list
   #+begin_src emacs-lisp
     (setq Info-additional-directory-list (quote ("~/.local/share/info/")))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-07 Sat 22:42]
   :END:
** emagician-fix-spell-memory
   #+begin_src emacs-lisp
   (prelude-require-package 'emagician-fix-spell-memory)
   (require 'emagician-fix-spell-memory)
   #+end_src
** elip
   #+begin_src emacs-lisp :tangle no
     (add-to-list 'load-path "~/.local/share/emacs/site-lisp")
     (add-to-list 'load-path "~/.local/share/emacs/site-lisp/edb")
     (require 'elip)
   #+end_src
** Volume
   #+begin_src emacs-lisp
     (prelude-require-package 'volume)
     (setq volume-backend 'volume-amixer-backend)
     (setq volume-amixer-program "samixer")
     (require 'volume)
     (global-set-key (kbd "C-c v") #'volume)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-11-12 Wed 19:21]
   :END:
** [[https://github.com/kiwanami/emacs-calfw][calfw]] ([[http://www.emacswiki.org/emacs/Calfw][emacswiki]])
       #+begin_src emacs-lisp
         (prelude-require-packages '(calfw calfw-gcal))

         (require 'calfw-gcal)
         (require 'calfw-org)
         (require 'calfw-cal)
         (require 'calfw-ical)
         (require 'calfw-howm)
         (require 'calfw-org)

         (defun rfnash-open-calendar ()
           (interactive)
           (cfw:open-calendar-buffer
            :contents-sources
            (list
             (cfw:org-create-source "Green")  ; orgmode source
             (cfw:howm-create-source "Blue") ; howm source
             (cfw:cal-create-source "Orange") ; diary source
             (cfw:ical-create-source "gcal - Main Calendar"
                                     "https://www.google.com/calendar/ical/musicmaker1118%40gmail.com/private-e760c860d242661263a68f8e42dfe0bd/basic.ics"
                                     "IndianRed") ; google calendar ICS. Doesn't support repeating events (only shows them on day of first repeat)
             )))
   #+end_src
** TODO [[http://howm.sourceforge.jp/README.html][howm]] ([[http://howm.sourceforge.jp/cgi-bin/hiki/hiki.cgi?e.FrontPage][wiki]], [[http://www.emacswiki.org/emacs/HowmMode][emacswiki]], [[http://www.emacswiki.org/emacs/HowmAndCalendar][Howm and calendar]], [[http://howm.sourceforge.jp/README.html][tutorial]] [[[file:~/.emacs.d/el-get/howm/doc/README.html][local]]], [[http://sourceforge.jp/projects/howm/lists/archive/eng/2008/000038.html][integrating with org-mode]].) :NEXT:
   #+begin_src text
     `howm-mode' Minor Mode Bindings:
     key             binding
     ---             -------

     C-c             Prefix Command
     C-x             Prefix Command

     C-x C-s         howm-save-buffer

     C-c ,           Prefix Command

     C-c , SPC       howm-toggle-buffer
     C-c , ,         howm-menu
     C-c , .         howm-find-today
     C-c , :         howm-find-yesterday
     C-c , A         howm-list-around
     C-c , C         howm-create-here
     C-c , D         howm-dup
     C-c , H         howm-first-memo
     C-c , I         howm-create-interactively
     C-c , K         howm-keyword-to-kill-ring
     C-c , L         howm-last-memo
     C-c , M         howm-open-named-file
     C-c , N         howm-next-memo
     C-c , P         howm-previous-memo
     C-c , Q         howm-kill-all
     C-c , T         howm-insert-dtime
     C-c , a         howm-list-all
     C-c , b         howm-list-buffers
     C-c , c         howm-create
     C-c , d         howm-insert-date
     C-c , e         howm-remember
     C-c , g         howm-list-grep
     C-c , h         howm-history
     C-c , i         howm-insert-keyword
     C-c , l         howm-list-recent
     C-c , m         howm-list-migemo
     C-c , n         action-lock-goto-next-link
     C-c , o         howm-occur
     C-c , p         action-lock-goto-previous-link
     C-c , r         howm-refresh
     C-c , s         howm-list-grep-fixed
     C-c , t         howm-list-todo
     C-c , w         howm-random-walk
     C-c , x         howm-list-mark-ring
     C-c , y         howm-list-schedule
   #+end_src
   #+begin_src emacs-lisp
     (require 'howm)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-13 Fri 16:22]
   :END:
*** TODO [#B] Howm-related
   - http://angg.twu.net/e/howm.e.html
   - http://www.emacswiki.org/emacs/PlannerAndHowmComparison
   - http://pages.sachachua.com/sharing/blog.html
   - http://sachachua.com/notebook/wickedcoolemacs/wc-emacs-07-managing-your-notes.pdf
   - http://sachachua.com/notebook/wickedcoolemacs/wc-emacs-07-managing-your-notes.html
   - http://sachachua.com/blog/2008/01/note-taking-random-notes-journal-entries-outlines-and-hyperlinks/
   - http://sachachua.com/blog/2005/09/planning-reflection/
   - http://sachachua.com/blog/2005/06/planner-support-for-action-lockel/
   - http://sachachua.com/blog/2004/01/emacs-wiki-sites/
   :PROPERTIES:
   :CREATED:  [2015-02-18 Wed 00:00]
   :ToodledoID: 48996451
   :Hash:     62b08258a1adeb06ffb4426679d7f3e4
   :END:
*** TODO http://howm.sourceforge.jp/a/
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 17:49]
:END:
*** TODO http://howm.sourceforge.jp/cgi-bin/hiki/hiki.cgi?ExternalTool
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 17:49]
:END:
*** TODO http://sourceforge.jp/projects/howm/lists/archive/eng/
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 17:51]
:END:
*** TODO http://howm.sourceforge.jp/a/rich-title/
:PROPERTIES:
:CREATED:  [2015-04-14 Tue 17:49]
:END:
** babel
   #+begin_src emacs-lisp
     (prelude-require-package 'babel)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-24 Thu 10:09]
   :END:
** ledger-mode
   #+begin_src emacs-lisp
     (prelude-require-package 'ledger-mode)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-24 Thu 10:09]
   :END:
** nix-mode
   #+begin_src emacs-lisp
     (prelude-require-package 'nix-mode)
     (require 'nix-mode)
   #+end_src
** remem
   My rememberance agent configuration.
   #+begin_src emacs-lisp
     (require 'prelude-mode)
     (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/")
     (add-to-list 'load-path "/usr/share/emacs/site-lisp/")
     (define-key prelude-mode-map (kbd "C-c r") nil)
     (define-key global-map (kbd "C-c r") nil)
     ;; (setq remem-scopes-list '(("mail" 6 5 500)
     ;;                           ("notes" 2 5 500)))
     (setq remem-scopes-list '(("mail" 6 5 500)))
     ;;(load "remem")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-09-03 Wed 16:42]
   :END:
** Sauron
   #+begin_src emacs-lisp
     (prelude-require-package 'sauron)
     ;; (sauron-start)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-10-25 Sat 19:35]
   :END:
** anchored-transpose
   #+begin_src emacs-lisp
     (prelude-require-package 'anchored-transpose)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-01-04 Sun 23:55]
   :END:
** [[https://github.com/vspinu/zotelo][Zotelo]]
   #+begin_src emacs-lisp
     (prelude-require-package 'zotelo)
     (add-hook 'TeX-mode-hook 'zotelo-minor-mode)
     (add-hook 'org-mode-hook 'zotelo-minor-mode)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-01-08 Thu 11:56]
   :END:
** RFC
   #+begin_src emacs-lisp
     (prelude-require-package 'w3)
     (setq rfc-url-save-directory (expand-file-name  "RFC" user-emacs-directory))
     (setq rfc-index-url "http://www.ietf.org/iesg/1rfc_index.txt")
     (setq rfc-archive-alist (list (expand-file-name "rfc.zip" rfc-url-save-directory)
                                   rfc-url-save-directory
                                   "http://www.ietf.org/rfc/"))
     (setq rfc-insert-content-url-hook '(rfc-url-save))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-01-13 Tue 11:14]
   :END:
** [[https://github.com/tam17aki/ace-isearch][ace-isearch]] -- See [[http://sachachua.com/blog/2015/01/emacs-kaizen-ace-isearch-combines-ace-jump-mode-helm-swoop/][Sachachua's article]].
   #+begin_src emacs-lisp
     (prelude-require-package 'ace-isearch)
     (global-ace-isearch-mode)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-01-16 Fri 14:15]
   :END:
** [[http://elpa.gnu.org/packages/poker.html][poker]]
   Texas Hold'em Poker
   #+begin_src emacs-lisp
     (prelude-require-package 'poker)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-07 Sat 15:06]
   :END:
** [[https://github.com/agrif/pianobar.el][pianobar.el]]
   #+begin_src emacs-lisp
     (prelude-require-package 'pianobar)
     (require 'pianobar)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-07 Sat 15:41]
   :END:
** [[https://github.com/julienXX/helm-lobste.rs][helm-lobsters]]
   #+begin_src emacs-lisp
     (prelude-require-package 'helm-lobsters)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-11 Wed 23:34]
   :END:
** [[https://github.com/dacap/keyfreq][keyfreq]]
   Track Emacs commands frequency
   #+begin_src emacs-lisp
     (prelude-require-package 'keyfreq)
     (setq keyfreq-file (expand-file-name "keyfreq" prelude-savefile-dir))
     (keyfreq-mode 1)
     (keyfreq-autosave-mode 1)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-13 Fri 14:12]
   :END:
** Diary ([[http://www.emacswiki.org/emacs/DiaryMode][emacswiki]], [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Diary.html][manual]])
   #+begin_src emacs-lisp
     (setq diary-file (expand-file-name "diary" prelude-savefile-dir))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-02-13 Fri 16:07]
   :END:
** Alert
   #+begin_src emacs-lisp
     (setq alert-default-style 'notifications)
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-03-03 Tue 00:06]
   :END:
** Temporary Directory
   #+begin_src emacs-lisp
     (setq temporary-file-directory "/home/rfnash/tmp")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2015-03-03 Tue 00:07]
   :END:
** [[https://github.com/sachac/artbollocks-mode][artbollacks-mode]]
#+begin_src emacs-lisp
  (use-package artbollocks-mode
    :ensure t
    :commands artbollocks-mode
    :init
    (add-hook 'text-mode-hook 'artbollocks-mode)
    (add-hook 'org-mode-hook 'artbollocks-mode))
#+end_src
:PROPERTIES:
:CREATED:  [2015-04-10 Fri 19:09]
:END:
* Emacs Server
  Start the Emacs server if it isn't already running
  #+begin_src emacs-lisp
    (require 'server)
    (if (not (server-running-p server-name)) (server-start))
  #+end_src

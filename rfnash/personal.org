#+TITLE: rfnash's Emacs configuration
#+OPTIONS: toc:4 h:4
* Historical
  :PROPERTIES:
  :CREATED:  [2014-10-07 Tue 13:22]
  :END:
** Old init.el for Historical Reference
*** Custom Set
Custom set variables
#+begin_src emacs-lisp :tangle no
  (custom-set-variables
   '(helm-adaptative-mode t nil (helm-adaptative))
   '(helm-adaptive-history-length 1000)
   '(helm-ff-file-name-history-use-recentf t))
#+end_src
Custom set faces
#+begin_src emacs-lisp :tangle no
  (custom-set-faces
   '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
   '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))
#+end_src
*** From [[https://github.com/dimitri/emacs-kicker][Emacs Kicker]]
Full Screen
#+begin_src emacs-lisp :tangle no
  (defun fullscreen ()
    (interactive)
    (set-frame-parameter nil 'fullscreen
                         (if (frame-parameter nil 'fullscreen) nil 'fullboth)))
#+end_src
*** From Emacsredux
#+begin_src emacs-lisp :tangle no
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c e") 'eval-end-replace)
#+end_src
*** From whattheemacsd.com
Write backup files to own directory
#+begin_src emacs-lisp :tangle no
  (setq backup-directory-alist
        `(("." . ,(expand-file-name
                   (concat user-emacs-directory "backups")))))
#+end_src
Make backups of files, even when they're in version control
#+begin_src emacs-lisp :tangle no
  (setq vc-make-backup-files t)
#+end_src
Save point position between sessions
#+begin_src emacs-lisp :tangle no
  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src
Cleanup buffer
#+begin_src emacs-lisp :tangle no
  (defun cleanup-buffer-safe ()
    "Perform a bunch of safe operations on the whitespace content of a buffer.
  Does not indent buffer, because it is used for a before-save-hook, and that
  might be bad.
  TODO: Will screw up makefiles by changing tabs to whitespace."
    (interactive)
    ;; (untabify (point-min) (point-max))
    (delete-trailing-whitespace)
    (set-buffer-file-coding-system 'utf-8))
#+end_src
Various superfluous white-space. Just say no.
#+begin_src emacs-lisp :tangle no
  (add-hook 'before-save-hook 'cleanup-buffer-safe)
  (defun cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer.
  Including indent-buffer, which should not be called automatically on save."
    (interactive)
    (cleanup-buffer-safe)
    (indent-region (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'cleanup-buffer)
#+end_src
Join line
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "M-j")
                  (lambda ()
                    (interactive)
                    (join-line -1)))
#+end_src
Recent Files
(require 'recentf)
#+begin_src emacs-lisp :tangle no
  (setq recentf-save-file "~/.emacs.d/.recentf"
        recentf-max-saved-items 200)
  (recentf-mode +1)
#+end_src
Enables paredit in the minibuffer when it is used to eval a lisp expression with M-:
#+begin_src emacs-lisp :tangle no
  (defun conditionally-enable-paredit-mode ()
    "Enable `paredit-mode' in the minibuffer, during `eval-expression'."
    (if (eq this-command 'eval-expression)
        (paredit-mode 1)))
  (add-hook 'minibuffer-setup-hook 'conditionally-enable-paredit-mode)
#+end_src
Treat CamelCase words as seperate words for eg. deletion
#+begin_src emacs-lisp :tangle no
  (add-hook 'prog-mode-hook 'subword-mode)
#+end_src
Whitespace Mode
#+begin_src emacs-lisp :tangle no
  (setq whitespace-global-modes '(not org-mode))
  ;;(global-whitespace-mode)
  (setq show-trailing-whitespace t)
#+end_src
Open certain terminal programs in their own buffer
#+begin_src emacs-lisp :tangle no
  (defun htop ()
    "Start htop in its own buffer."
    (interactive)
    (ansi-term "htop" "htop"))
  (defun mixer ()
    "Start alsamixer in its own buffer"
    (interactive)
    (ansi-term "alsamixer" "mixer"))
#+end_src
** package.el
   old ELPA package config for historical interest
   #+begin_src emacs-lisp :tangle no
     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (add-to-list 'package-archives
                  '("org" . "http://orgmode.org/elpa/") t)
     (add-to-list 'package-archives
                  '("tromey" . "http://tromey.com/elpa/") t)
     (add-to-list 'package-archives
                  '("gnu" . "http://elpa.gnu.org/packages/") t)
     (add-to-list 'package-archives
                  '("marmalade" . "http://marmalade-repo.org/packages/") t)
     (package-initialize)

     (when (not package-archive-contents)
       (package-refresh-contents))

     (defvar my-packages '((cl-lib)
                           (bbdb
                            (progn
                              (setq bbdb-file "~/.emacs.d/bbdb")
                              (require 'bbdb)
                              (bbdb-initialize 'gnus 'message)
                              (bbdb-insinuate-message)
                              (add-hook 'gnus-startup-hook 'bbdb-insinuate-gnus)
                              (setq bbdb-send-mail-style 'gnus)
                              (setq bbdb-complete-name-full-completion t)
                              (setq bbdb-completion-type 'primary-or-name)
                              (setq bbdb-complete-name-allow-cycling t)
                              (setq bbdb-offer-save 1
                                    bbdb-use-pop-up t
                                    bbdb-electric-p t
                                    bbdb-popup-target-lines  1)))
                           ;;(bbdb-vcard)
                           (emms)
                           (evil)
                           (linum-off
                            (require 'linum-off))          ; linum slows down org-mode
                           (quack)
                           (geiser)
                           (puppet-mode)
                           (bitlbee (require 'bitlbee))
                           (rainbow-delimiters (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
                           (powerline)
                           (htmlize)                       ; required by org-mode html export
                           (helm-ag)
                           (w3m)
                           (elixir-mode)
                           (flymake-easy)                  ; required by flymake-elixir
                           (flymake-elixir
                            (progn
                              (add-hook 'find-file-hook 'flymake-find-file-hook)
                              (require 'flymake-elixir)
                              (add-hook 'elixir-mode-hook 'flymake-elixir-load)))
                           (smart-tab                      ; indents or completes, inteligently
                            (progn
                              (require 'smart-tab)
                              (global-smart-tab-mode 1)
                              (define-key read-expression-map [(tab)] 'hippie-expand)))
                           (nrepl                          ;  see https://github.com/kingtim/nrepl.el
                            (progn
                              (add-hook 'nrepl-interaction-mode-hook 'nrepl-turn-on-eldoc-mode)
                              (setq nrepl-hide-special-buffers t)
                              (add-to-list 'same-window-buffer-names "*nrepl*")
                              (add-hook 'nrepl-mode-hook 'subword-mode)
                              (add-hook 'nrepl-mode-hook 'paredit-mode)
                              (add-hook 'nrepl-mode-hook 'rainbow-delimiters-mode)))
                           (auctex)
                           (auctex-latexmk)
                           (ioccur)                       ; not sure if i like better than helm-occur or not
                           (switch-window)
                           (goto-last-change)
                           (org-page))
       "A list of packages to ensure are installed at launch.")

     (dolist (p my-packages)
       (progn
         (when (not (package-installed-p (car p)))
           (package-install (car p)))
         (eval (cadr p))))

     (custom-set-faces
      '(mode-line ((t (:foreground "#030303" :background "#bdbdbd" :box nil))))
      '(mode-line-inactive ((t (:foreground "#f9f9f9" :background "#666666" :box nil)))))
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:21]
   :END:
** ido.el
   old ido config for historical reference
   #+begin_src emacs-lisp :tangle no
     use ido for minibuffer completion
     (require 'ido)
     (ido-mode t)
     (setq ido-save-directory-list-file "~/.emacs.d/.ido.last")
     (setq ido-enable-flex-matching t)
     (setq ido-use-filename-at-point 'guess)
     (setq ido-show-dot-for-dired t)

     smex: a better (ido like) M-x
     (setq smex-save-file "~/.emacs.d/.smex-items")
     (global-set-key (kbd "M-x") 'smex)
     (global-set-key (kbd "M-X") 'smex-major-mode-commands)
     (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command) ; This is your old M-x.

     (require 'ido-ubiquitous)
     (ido-ubiquitous-mode 1)

     Fix ido-ubiquitous for newer packages
     (defmacro ido-ubiquitous-use-new-completing-read (cmd package)
      `(eval-after-load ,package
         '(defadvice ,cmd (around ido-ubiquitous-new activate)
          (let ((ido-ubiquitous-enable-compatibility nil))
            ad-do-it))))

     (ido-ubiquitous-use-new-completing-read webjump 'webjump)
     (ido-ubiquitous-use-new-completing-read yas/expand 'yasnippet)
     (ido-ubiquitous-use-new-completing-read yas/visit-snippet-file 'yasnippet)


     (defun recentf-ido-find-file ()
      "Find a recent file using ido."
      (interactive)
      (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
        (when file
          (find-file file))))
     (global-set-key (kbd "C-c f")  'recentf-ido-find-file)

     See the following
     org-refiling - http://kangtu.me/~kangtu/pavilion.html
     Targets include this file and any file contributing to the agenda - up to 9 levels deep
     See also http://doc.norang.ca/org-mode.html#RefileSetup
     Use IDO for both buffer and file completion and ido-everywhere to t
     (setq org-completion-use-ido nil)
     (setq ido-max-directory-size 100000)
     (ido-mode (quote both))

     (load-file "/usr/share/emacs/24.3/lisp/ido.el.gz")
   #+end_src
   :PROPERTIES:
   :CREATED:  [2014-07-01 Tue 14:30]
   :END:
* [[http://batsov.com/prelude/][Prelude]]
  :PROPERTIES:
  :CREATED:  [2015-04-17 Fri 16:57]
  :END:
** Whitespace
   #+begin_src emacs-lisp
     (setq prelude-clean-whitespace-on-save nil)
     (set-face-attribute 'whitespace-line nil :foreground nil :background "#ffe0e0")
     (setq global-whitespace-mode t)
     (eval-after-load 'whitespace '(diminish 'whitespace-mode))
   #+end_src
   #+begin_src emacs-lisp :tangle no
     ;; (setq whitespace-style '(face tabs empty trailing lines-tail)) ; Default Prelude value
     ;; (setq whitespace-style '(face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark)) ; Original value
     (setq whitespace-style '(face tabs spaces trailing lines-tail space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))

     (set-face-attribute 'whitespace-indentation nil :foreground "lightgray")
     (set-face-attribute 'whitespace-newline nil :foreground "lightgray")
     (set-face-attribute 'whitespace-space nil :foreground "lightgray")
     (set-face-attribute 'whitespace-tab nil :foreground "lightgray")
     (set-face-attribute 'whitespace-trailing nil :inverse-video t)
   #+end_src
   :PROPERTIES:
  :CREATED:  [2015-04-17 Fri 17:23]
  :END:
** prelude-key-chord
Binds useful features to key combinations
#+begin_src emacs-lisp
  (use-package prelude-key-chord)
#+end_src
